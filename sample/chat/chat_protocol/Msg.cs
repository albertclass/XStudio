// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Chat {

  /// <summary>Holder for reflection information generated from msg.proto</summary>
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgltc2cucHJvdG8SBGNoYXQiXwoJbG9naW5fcmVxEg8KB3VzZXJfaWQYASAB",
            "KAQSDAoEbmljaxgCIAEoCRIOCgZzZXJ2ZXIYAyABKAkSFAoMY2hhbm5lbF93",
            "aWxkGAQgASgJEg0KBWV4dHJhGAUgASgJIkwKCWxvZ2luX2FjaxIOCgZyZXN1",
            "bHQYASABKAUSDwoHY2hhdF9pZBgCIAEoDRIPCgd1c2VyX2lkGAMgASgEEg0K",
            "BXRva2VuGAQgASgJIh0KCmxvZ291dF9yZXESDwoHdXNlcl9pZBgBIAEoBCIv",
            "Cg11c2VyX2F1dGhfcmVxEg8KB3VzZXJfaWQYASABKAQSDQoFdG9rZW4YAiAB",
            "KAkiXgoNdXNlcl9hdXRoX2FjaxIOCgZyZXN1bHQYASABKAUSDwoHY2hhdF9p",
            "ZBgCIAEoDRIPCgd1c2VyX2lkGAMgASgEEgwKBG5pY2sYBCABKAkSDQoFZXh0",
            "cmEYBSABKAkiIAoNdXNlcl9pbmZvX3JlcRIPCgd1c2VyX2lkGAEgASgEIl4K",
            "DXVzZXJfaW5mb19hY2sSDgoGcmVzdWx0GAEgASgFEg8KB2NoYXRfaWQYAiAB",
            "KA0SDwoHdXNlcl9pZBgDIAEoBBIMCgRuaWNrGAQgASgJEg0KBWV4dHJhGAUg",
            "ASgJIioKEmNyZWF0ZV9jaGFubmVsX3JlcRIUCgxjaGFubmVsX25hbWUYASAB",
            "KAkiPgoSY3JlYXRlX2NoYW5uZWxfYWNrEhQKDGNoYW5uZWxfbmFtZRgBIAEo",
            "CRISCgpjaGFubmVsX2lkGAIgASgNIj0KEWNoYW5uZWxfZW50ZXJfbnRmEhIK",
            "CmNoYW5uZWxfaWQYASABKA0SFAoMY2hhbm5lbF9uYW1lGAIgASgJItIBChFj",
            "aGFubmVsX2VudGVyX3JlcRINCgV0b2tlbhgBIAEoDRIwCgR0eXBlGAIgASgO",
            "MiIuY2hhdC5jaGFubmVsX2VudGVyX3JlcS5lbnRlcl90eXBlEhIKCmNoYW5u",
            "ZWxfaWQYAyABKA0SFAoMY2hhbm5lbF9uYW1lGAQgASgJEhQKDGNoYW5uZWxf",
            "cGFzcxgFIAEoCSI8CgplbnRlcl90eXBlEgwKCFdJTERDQVJEEAASEAoMQ0hB",
            "Tk5FTF9OQU1FEAESDgoKQ0hBTk5FTF9JRBACIlwKEWNoYW5uZWxfZW50ZXJf",
            "YWNrEg4KBnJlc3VsdBgBIAEoBRINCgV0b2tlbhgCIAEoDRISCgpjaGFubmVs",
            "X2lkGAMgASgNEhQKDGNoYW5uZWxfbmFtZRgEIAEoCSInChFjaGFubmVsX2xl",
            "YXZlX3JlcRISCgpjaGFubmVsX2lkGAEgASgNIk0KEWNoYW5uZWxfbGVhdmVf",
            "YWNrEg4KBnJlc3VsdBgBIAEoBRISCgpjaGFubmVsX2lkGAIgASgNEhQKDGNo",
            "YW5uZWxfbmFtZRgDIAEoCSI9Cg11c2VyX2NoYXRfcmVxEg0KBXRva2VuGAEg",
            "ASgNEg8KB2NoYXRfaWQYAiABKA0SDAoEdGV4dBgDIAEoCSI9Cg11c2VyX2No",
            "YXRfbnRmEg0KBXRva2VuGAEgASgNEg8KB2NoYXRfaWQYAiABKA0SDAoEdGV4",
            "dBgDIAEoCSJDChBjaGFubmVsX2NoYXRfcmVxEg0KBXRva2VuGAEgASgNEhIK",
            "CmNoYW5uZWxfaWQYAiABKA0SDAoEdGV4dBgDIAEoCSJUChBjaGFubmVsX2No",
            "YXRfbnRmEg0KBXRva2VuGAEgASgNEhIKCmNoYW5uZWxfaWQYAiABKA0SDwoH",
            "Y2hhdF9pZBgDIAEoDRIMCgR0ZXh0GAQgASgJIj8KD3N5c3RlbV9jaGF0X3Jl",
            "cRIPCgdjaGFubmVsGAEgASgNEg0KBWZsYWdzGAIgASgNEgwKBHRleHQYAyAB",
            "KAkiQgoPc3lzdGVtX2NoYXRfbnRmEhIKCmNoYW5uZWxfaWQYASABKA0SDQoF",
            "ZmxhZ3MYAiABKA0SDAoEdGV4dBgDIAEoCSI+CghjaGF0X2VychIOCgZyZXN1",
            "bHQYASABKAUSDQoFdG9rZW4YAiABKA0SEwoLZGVzY3JpcHRpb24YAyABKAkq",
            "qwQKBk1TR19JRBINCglNU0dfQkVHSU4QABIVChBNU0dfVVNFUkFVVEhfUkVR",
            "EIECEhUKEE1TR19VU0VSQVVUSF9BQ0sQggISGgoVTVNHX0NIQU5ORUxfRU5U",
            "RVJfTlRGEIQCEhUKEE1TR19VU0VSSU5GT19SRVEQgSASFQoQTVNHX1VTRVJJ",
            "TkZPX0FDSxCCIBIaChVNU0dfQ0hBTk5FTF9FTlRFUl9SRVEQgyASGgoVTVNH",
            "X0NIQU5ORUxfRU5URVJfQUNLEIQgEhoKFU1TR19DSEFOTkVMX0xFQVZFX1JF",
            "URCFIBIaChVNU0dfQ0hBTk5FTF9MRUFWRV9BQ0sQhiASFgoRTVNHX1VTRVJf",
            "Q0hBVF9SRVEQhyASFgoRTVNHX1VTRVJfQ0hBVF9OVEYQiCASGQoUTVNHX0NI",
            "QU5ORUxfQ0hBVF9SRVEQiSASGQoUTVNHX0NIQU5ORUxfQ0hBVF9OVEYQiiAS",
            "EQoMTVNHX0NIQVRfRVJSEIwgEhUKEE1TR19TWVNfQ0hBVF9OVEYQjiASEQoN",
            "TVNHX0xPR0lOX1JFURABEhEKDU1TR19MT0dJTl9BQ0sQAhISCg5NU0dfTE9H",
            "T1VUX1JFURADEhIKDk1TR19MT0dPVVRfQUNLEAQSGgoWTVNHX0NSRUFURV9D",
            "SEFOTkVMX1JFURAFEhoKFk1TR19DUkVBVEVfQ0hBTk5FTF9BQ0sQBhIUChBN",
            "U0dfU1lTX0NIQVRfUkVREAcqTwoGQ0hBVF9UEgcKA1VTUhAAEgsKB1VTUl9Q",
            "MlAQARIMCghTWVNfTk9URRACEhEKDVNZU19JTVBPUlRBTlQQAxIOCgpTWVNf",
            "U0NSRUVOEARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Chat.MSG_ID), typeof(global::Chat.CHAT_T), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.login_req), global::Chat.login_req.Parser, new[]{ "UserId", "Nick", "Server", "ChannelWild", "Extra" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.login_ack), global::Chat.login_ack.Parser, new[]{ "Result", "ChatId", "UserId", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.logout_req), global::Chat.logout_req.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.user_auth_req), global::Chat.user_auth_req.Parser, new[]{ "UserId", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.user_auth_ack), global::Chat.user_auth_ack.Parser, new[]{ "Result", "ChatId", "UserId", "Nick", "Extra" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.user_info_req), global::Chat.user_info_req.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.user_info_ack), global::Chat.user_info_ack.Parser, new[]{ "Result", "ChatId", "UserId", "Nick", "Extra" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.create_channel_req), global::Chat.create_channel_req.Parser, new[]{ "ChannelName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.create_channel_ack), global::Chat.create_channel_ack.Parser, new[]{ "ChannelName", "ChannelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.channel_enter_ntf), global::Chat.channel_enter_ntf.Parser, new[]{ "ChannelId", "ChannelName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.channel_enter_req), global::Chat.channel_enter_req.Parser, new[]{ "Token", "Type", "ChannelId", "ChannelName", "ChannelPass" }, null, new[]{ typeof(global::Chat.channel_enter_req.Types.enter_type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.channel_enter_ack), global::Chat.channel_enter_ack.Parser, new[]{ "Result", "Token", "ChannelId", "ChannelName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.channel_leave_req), global::Chat.channel_leave_req.Parser, new[]{ "ChannelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.channel_leave_ack), global::Chat.channel_leave_ack.Parser, new[]{ "Result", "ChannelId", "ChannelName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.user_chat_req), global::Chat.user_chat_req.Parser, new[]{ "Token", "ChatId", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.user_chat_ntf), global::Chat.user_chat_ntf.Parser, new[]{ "Token", "ChatId", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.channel_chat_req), global::Chat.channel_chat_req.Parser, new[]{ "Token", "ChannelId", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.channel_chat_ntf), global::Chat.channel_chat_ntf.Parser, new[]{ "Token", "ChannelId", "ChatId", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.system_chat_req), global::Chat.system_chat_req.Parser, new[]{ "Channel", "Flags", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.system_chat_ntf), global::Chat.system_chat_ntf.Parser, new[]{ "ChannelId", "Flags", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chat.chat_err), global::Chat.chat_err.Parser, new[]{ "Result", "Token", "Description" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MSG_ID {
    [pbr::OriginalName("MSG_BEGIN")] MsgBegin = 0,
    /// <summary>
    /// Client Message
    /// </summary>
    [pbr::OriginalName("MSG_USERAUTH_REQ")] MsgUserauthReq = 257,
    [pbr::OriginalName("MSG_USERAUTH_ACK")] MsgUserauthAck = 258,
    [pbr::OriginalName("MSG_CHANNEL_ENTER_NTF")] MsgChannelEnterNtf = 260,
    [pbr::OriginalName("MSG_USERINFO_REQ")] MsgUserinfoReq = 4097,
    [pbr::OriginalName("MSG_USERINFO_ACK")] MsgUserinfoAck = 4098,
    [pbr::OriginalName("MSG_CHANNEL_ENTER_REQ")] MsgChannelEnterReq = 4099,
    [pbr::OriginalName("MSG_CHANNEL_ENTER_ACK")] MsgChannelEnterAck = 4100,
    [pbr::OriginalName("MSG_CHANNEL_LEAVE_REQ")] MsgChannelLeaveReq = 4101,
    [pbr::OriginalName("MSG_CHANNEL_LEAVE_ACK")] MsgChannelLeaveAck = 4102,
    [pbr::OriginalName("MSG_USER_CHAT_REQ")] MsgUserChatReq = 4103,
    [pbr::OriginalName("MSG_USER_CHAT_NTF")] MsgUserChatNtf = 4104,
    [pbr::OriginalName("MSG_CHANNEL_CHAT_REQ")] MsgChannelChatReq = 4105,
    [pbr::OriginalName("MSG_CHANNEL_CHAT_NTF")] MsgChannelChatNtf = 4106,
    [pbr::OriginalName("MSG_CHAT_ERR")] MsgChatErr = 4108,
    [pbr::OriginalName("MSG_SYS_CHAT_NTF")] MsgSysChatNtf = 4110,
    /// <summary>
    /// Server Message
    /// </summary>
    [pbr::OriginalName("MSG_LOGIN_REQ")] MsgLoginReq = 1,
    [pbr::OriginalName("MSG_LOGIN_ACK")] MsgLoginAck = 2,
    [pbr::OriginalName("MSG_LOGOUT_REQ")] MsgLogoutReq = 3,
    [pbr::OriginalName("MSG_LOGOUT_ACK")] MsgLogoutAck = 4,
    [pbr::OriginalName("MSG_CREATE_CHANNEL_REQ")] MsgCreateChannelReq = 5,
    [pbr::OriginalName("MSG_CREATE_CHANNEL_ACK")] MsgCreateChannelAck = 6,
    [pbr::OriginalName("MSG_SYS_CHAT_REQ")] MsgSysChatReq = 7,
  }

  public enum CHAT_T {
    [pbr::OriginalName("USR")] Usr = 0,
    [pbr::OriginalName("USR_P2P")] UsrP2P = 1,
    [pbr::OriginalName("SYS_NOTE")] SysNote = 2,
    [pbr::OriginalName("SYS_IMPORTANT")] SysImportant = 3,
    [pbr::OriginalName("SYS_SCREEN")] SysScreen = 4,
  }

  #endregion

  #region Messages
  public sealed partial class login_req : pb::IMessage<login_req> {
    private static readonly pb::MessageParser<login_req> _parser = new pb::MessageParser<login_req>(() => new login_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<login_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_req(login_req other) : this() {
      userId_ = other.userId_;
      nick_ = other.nick_;
      server_ = other.server_;
      channelWild_ = other.channelWild_;
      extra_ = other.extra_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_req Clone() {
      return new login_req(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 2;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 3;
    private string server_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Server {
      get { return server_; }
      set {
        server_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_wild" field.</summary>
    public const int ChannelWildFieldNumber = 4;
    private string channelWild_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelWild {
      get { return channelWild_; }
      set {
        channelWild_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 5;
    private string extra_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Extra {
      get { return extra_; }
      set {
        extra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as login_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(login_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Nick != other.Nick) return false;
      if (Server != other.Server) return false;
      if (ChannelWild != other.ChannelWild) return false;
      if (Extra != other.Extra) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Server.Length != 0) hash ^= Server.GetHashCode();
      if (ChannelWild.Length != 0) hash ^= ChannelWild.GetHashCode();
      if (Extra.Length != 0) hash ^= Extra.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nick);
      }
      if (Server.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Server);
      }
      if (ChannelWild.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ChannelWild);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Extra);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Server.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Server);
      }
      if (ChannelWild.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelWild);
      }
      if (Extra.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Extra);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(login_req other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Server.Length != 0) {
        Server = other.Server;
      }
      if (other.ChannelWild.Length != 0) {
        ChannelWild = other.ChannelWild;
      }
      if (other.Extra.Length != 0) {
        Extra = other.Extra;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            Nick = input.ReadString();
            break;
          }
          case 26: {
            Server = input.ReadString();
            break;
          }
          case 34: {
            ChannelWild = input.ReadString();
            break;
          }
          case 42: {
            Extra = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class login_ack : pb::IMessage<login_ack> {
    private static readonly pb::MessageParser<login_ack> _parser = new pb::MessageParser<login_ack>(() => new login_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<login_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_ack(login_ack other) : this() {
      result_ = other.result_;
      chatId_ = other.chatId_;
      userId_ = other.userId_;
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_ack Clone() {
      return new login_ack(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "chat_id" field.</summary>
    public const int ChatIdFieldNumber = 2;
    private uint chatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatId {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as login_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(login_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (ChatId != other.ChatId) return false;
      if (UserId != other.UserId) return false;
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (ChatId != 0) hash ^= ChatId.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (ChatId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChatId);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UserId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (ChatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatId);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(login_ack other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.ChatId != 0) {
        ChatId = other.ChatId;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            ChatId = input.ReadUInt32();
            break;
          }
          case 24: {
            UserId = input.ReadUInt64();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class logout_req : pb::IMessage<logout_req> {
    private static readonly pb::MessageParser<logout_req> _parser = new pb::MessageParser<logout_req>(() => new logout_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<logout_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public logout_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public logout_req(logout_req other) : this() {
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public logout_req Clone() {
      return new logout_req(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as logout_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(logout_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(logout_req other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class user_auth_req : pb::IMessage<user_auth_req> {
    private static readonly pb::MessageParser<user_auth_req> _parser = new pb::MessageParser<user_auth_req>(() => new user_auth_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<user_auth_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_auth_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_auth_req(user_auth_req other) : this() {
      userId_ = other.userId_;
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_auth_req Clone() {
      return new user_auth_req(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as user_auth_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(user_auth_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(user_auth_req other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class user_auth_ack : pb::IMessage<user_auth_ack> {
    private static readonly pb::MessageParser<user_auth_ack> _parser = new pb::MessageParser<user_auth_ack>(() => new user_auth_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<user_auth_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_auth_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_auth_ack(user_auth_ack other) : this() {
      result_ = other.result_;
      chatId_ = other.chatId_;
      userId_ = other.userId_;
      nick_ = other.nick_;
      extra_ = other.extra_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_auth_ack Clone() {
      return new user_auth_ack(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "chat_id" field.</summary>
    public const int ChatIdFieldNumber = 2;
    private uint chatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatId {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 4;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 5;
    private string extra_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Extra {
      get { return extra_; }
      set {
        extra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as user_auth_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(user_auth_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (ChatId != other.ChatId) return false;
      if (UserId != other.UserId) return false;
      if (Nick != other.Nick) return false;
      if (Extra != other.Extra) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (ChatId != 0) hash ^= ChatId.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Extra.Length != 0) hash ^= Extra.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (ChatId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChatId);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UserId);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Nick);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Extra);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (ChatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatId);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Extra.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Extra);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(user_auth_ack other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.ChatId != 0) {
        ChatId = other.ChatId;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Extra.Length != 0) {
        Extra = other.Extra;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            ChatId = input.ReadUInt32();
            break;
          }
          case 24: {
            UserId = input.ReadUInt64();
            break;
          }
          case 34: {
            Nick = input.ReadString();
            break;
          }
          case 42: {
            Extra = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class user_info_req : pb::IMessage<user_info_req> {
    private static readonly pb::MessageParser<user_info_req> _parser = new pb::MessageParser<user_info_req>(() => new user_info_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<user_info_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_info_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_info_req(user_info_req other) : this() {
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_info_req Clone() {
      return new user_info_req(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as user_info_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(user_info_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(user_info_req other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class user_info_ack : pb::IMessage<user_info_ack> {
    private static readonly pb::MessageParser<user_info_ack> _parser = new pb::MessageParser<user_info_ack>(() => new user_info_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<user_info_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_info_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_info_ack(user_info_ack other) : this() {
      result_ = other.result_;
      chatId_ = other.chatId_;
      userId_ = other.userId_;
      nick_ = other.nick_;
      extra_ = other.extra_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_info_ack Clone() {
      return new user_info_ack(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "chat_id" field.</summary>
    public const int ChatIdFieldNumber = 2;
    private uint chatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatId {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private ulong userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 4;
    private string nick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nick {
      get { return nick_; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 5;
    private string extra_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Extra {
      get { return extra_; }
      set {
        extra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as user_info_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(user_info_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (ChatId != other.ChatId) return false;
      if (UserId != other.UserId) return false;
      if (Nick != other.Nick) return false;
      if (Extra != other.Extra) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (ChatId != 0) hash ^= ChatId.GetHashCode();
      if (UserId != 0UL) hash ^= UserId.GetHashCode();
      if (Nick.Length != 0) hash ^= Nick.GetHashCode();
      if (Extra.Length != 0) hash ^= Extra.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (ChatId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChatId);
      }
      if (UserId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UserId);
      }
      if (Nick.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Nick);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Extra);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (ChatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatId);
      }
      if (UserId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserId);
      }
      if (Nick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (Extra.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Extra);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(user_info_ack other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.ChatId != 0) {
        ChatId = other.ChatId;
      }
      if (other.UserId != 0UL) {
        UserId = other.UserId;
      }
      if (other.Nick.Length != 0) {
        Nick = other.Nick;
      }
      if (other.Extra.Length != 0) {
        Extra = other.Extra;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            ChatId = input.ReadUInt32();
            break;
          }
          case 24: {
            UserId = input.ReadUInt64();
            break;
          }
          case 34: {
            Nick = input.ReadString();
            break;
          }
          case 42: {
            Extra = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class create_channel_req : pb::IMessage<create_channel_req> {
    private static readonly pb::MessageParser<create_channel_req> _parser = new pb::MessageParser<create_channel_req>(() => new create_channel_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<create_channel_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_channel_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_channel_req(create_channel_req other) : this() {
      channelName_ = other.channelName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_channel_req Clone() {
      return new create_channel_req(this);
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 1;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as create_channel_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(create_channel_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelName != other.ChannelName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(create_channel_req other) {
      if (other == null) {
        return;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChannelName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class create_channel_ack : pb::IMessage<create_channel_ack> {
    private static readonly pb::MessageParser<create_channel_ack> _parser = new pb::MessageParser<create_channel_ack>(() => new create_channel_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<create_channel_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_channel_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_channel_ack(create_channel_ack other) : this() {
      channelName_ = other.channelName_;
      channelId_ = other.channelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_channel_ack Clone() {
      return new create_channel_ack(this);
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 1;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 2;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as create_channel_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(create_channel_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelName != other.ChannelName) return false;
      if (ChannelId != other.ChannelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelName);
      }
      if (ChannelId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(create_channel_ack other) {
      if (other == null) {
        return;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ChannelName = input.ReadString();
            break;
          }
          case 16: {
            ChannelId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class channel_enter_ntf : pb::IMessage<channel_enter_ntf> {
    private static readonly pb::MessageParser<channel_enter_ntf> _parser = new pb::MessageParser<channel_enter_ntf>(() => new channel_enter_ntf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<channel_enter_ntf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_enter_ntf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_enter_ntf(channel_enter_ntf other) : this() {
      channelId_ = other.channelId_;
      channelName_ = other.channelName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_enter_ntf Clone() {
      return new channel_enter_ntf(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 2;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as channel_enter_ntf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(channel_enter_ntf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (ChannelName != other.ChannelName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChannelId);
      }
      if (ChannelName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChannelName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(channel_enter_ntf other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 18: {
            ChannelName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class channel_enter_req : pb::IMessage<channel_enter_req> {
    private static readonly pb::MessageParser<channel_enter_req> _parser = new pb::MessageParser<channel_enter_req>(() => new channel_enter_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<channel_enter_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_enter_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_enter_req(channel_enter_req other) : this() {
      token_ = other.token_;
      type_ = other.type_;
      channelId_ = other.channelId_;
      channelName_ = other.channelName_;
      channelPass_ = other.channelPass_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_enter_req Clone() {
      return new channel_enter_req(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private uint token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Chat.channel_enter_req.Types.enter_type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Chat.channel_enter_req.Types.enter_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 3;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 4;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_pass" field.</summary>
    public const int ChannelPassFieldNumber = 5;
    private string channelPass_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelPass {
      get { return channelPass_; }
      set {
        channelPass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as channel_enter_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(channel_enter_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Type != other.Type) return false;
      if (ChannelId != other.ChannelId) return false;
      if (ChannelName != other.ChannelName) return false;
      if (ChannelPass != other.ChannelPass) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token != 0) hash ^= Token.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (ChannelPass.Length != 0) hash ^= ChannelPass.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Token);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (ChannelId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChannelId);
      }
      if (ChannelName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ChannelName);
      }
      if (ChannelPass.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ChannelPass);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (ChannelPass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelPass);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(channel_enter_req other) {
      if (other == null) {
        return;
      }
      if (other.Token != 0) {
        Token = other.Token;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.ChannelPass.Length != 0) {
        ChannelPass = other.ChannelPass;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Token = input.ReadUInt32();
            break;
          }
          case 16: {
            type_ = (global::Chat.channel_enter_req.Types.enter_type) input.ReadEnum();
            break;
          }
          case 24: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 34: {
            ChannelName = input.ReadString();
            break;
          }
          case 42: {
            ChannelPass = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the channel_enter_req message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum enter_type {
        [pbr::OriginalName("WILDCARD")] Wildcard = 0,
        [pbr::OriginalName("CHANNEL_NAME")] ChannelName = 1,
        [pbr::OriginalName("CHANNEL_ID")] ChannelId = 2,
      }

    }
    #endregion

  }

  public sealed partial class channel_enter_ack : pb::IMessage<channel_enter_ack> {
    private static readonly pb::MessageParser<channel_enter_ack> _parser = new pb::MessageParser<channel_enter_ack>(() => new channel_enter_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<channel_enter_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_enter_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_enter_ack(channel_enter_ack other) : this() {
      result_ = other.result_;
      token_ = other.token_;
      channelId_ = other.channelId_;
      channelName_ = other.channelName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_enter_ack Clone() {
      return new channel_enter_ack(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private uint token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 3;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 4;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as channel_enter_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(channel_enter_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Token != other.Token) return false;
      if (ChannelId != other.ChannelId) return false;
      if (ChannelName != other.ChannelName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Token != 0) hash ^= Token.GetHashCode();
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (Token != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Token);
      }
      if (ChannelId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChannelId);
      }
      if (ChannelName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ChannelName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(channel_enter_ack other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Token != 0) {
        Token = other.Token;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            Token = input.ReadUInt32();
            break;
          }
          case 24: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 34: {
            ChannelName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class channel_leave_req : pb::IMessage<channel_leave_req> {
    private static readonly pb::MessageParser<channel_leave_req> _parser = new pb::MessageParser<channel_leave_req>(() => new channel_leave_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<channel_leave_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_leave_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_leave_req(channel_leave_req other) : this() {
      channelId_ = other.channelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_leave_req Clone() {
      return new channel_leave_req(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as channel_leave_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(channel_leave_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChannelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(channel_leave_req other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChannelId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class channel_leave_ack : pb::IMessage<channel_leave_ack> {
    private static readonly pb::MessageParser<channel_leave_ack> _parser = new pb::MessageParser<channel_leave_ack>(() => new channel_leave_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<channel_leave_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_leave_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_leave_ack(channel_leave_ack other) : this() {
      result_ = other.result_;
      channelId_ = other.channelId_;
      channelName_ = other.channelName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_leave_ack Clone() {
      return new channel_leave_ack(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 2;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 3;
    private string channelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as channel_leave_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(channel_leave_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (ChannelId != other.ChannelId) return false;
      if (ChannelName != other.ChannelName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (ChannelId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelId);
      }
      if (ChannelName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(channel_leave_ack other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 26: {
            ChannelName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class user_chat_req : pb::IMessage<user_chat_req> {
    private static readonly pb::MessageParser<user_chat_req> _parser = new pb::MessageParser<user_chat_req>(() => new user_chat_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<user_chat_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_chat_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_chat_req(user_chat_req other) : this() {
      token_ = other.token_;
      chatId_ = other.chatId_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_chat_req Clone() {
      return new user_chat_req(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private uint token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "chat_id" field.</summary>
    public const int ChatIdFieldNumber = 2;
    private uint chatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatId {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as user_chat_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(user_chat_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (ChatId != other.ChatId) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token != 0) hash ^= Token.GetHashCode();
      if (ChatId != 0) hash ^= ChatId.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Token);
      }
      if (ChatId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChatId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (ChatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatId);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(user_chat_req other) {
      if (other == null) {
        return;
      }
      if (other.Token != 0) {
        Token = other.Token;
      }
      if (other.ChatId != 0) {
        ChatId = other.ChatId;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Token = input.ReadUInt32();
            break;
          }
          case 16: {
            ChatId = input.ReadUInt32();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class user_chat_ntf : pb::IMessage<user_chat_ntf> {
    private static readonly pb::MessageParser<user_chat_ntf> _parser = new pb::MessageParser<user_chat_ntf>(() => new user_chat_ntf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<user_chat_ntf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_chat_ntf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_chat_ntf(user_chat_ntf other) : this() {
      token_ = other.token_;
      chatId_ = other.chatId_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public user_chat_ntf Clone() {
      return new user_chat_ntf(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private uint token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "chat_id" field.</summary>
    public const int ChatIdFieldNumber = 2;
    private uint chatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatId {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as user_chat_ntf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(user_chat_ntf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (ChatId != other.ChatId) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token != 0) hash ^= Token.GetHashCode();
      if (ChatId != 0) hash ^= ChatId.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Token);
      }
      if (ChatId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChatId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (ChatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatId);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(user_chat_ntf other) {
      if (other == null) {
        return;
      }
      if (other.Token != 0) {
        Token = other.Token;
      }
      if (other.ChatId != 0) {
        ChatId = other.ChatId;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Token = input.ReadUInt32();
            break;
          }
          case 16: {
            ChatId = input.ReadUInt32();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class channel_chat_req : pb::IMessage<channel_chat_req> {
    private static readonly pb::MessageParser<channel_chat_req> _parser = new pb::MessageParser<channel_chat_req>(() => new channel_chat_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<channel_chat_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_chat_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_chat_req(channel_chat_req other) : this() {
      token_ = other.token_;
      channelId_ = other.channelId_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_chat_req Clone() {
      return new channel_chat_req(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private uint token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 2;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as channel_chat_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(channel_chat_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (ChannelId != other.ChannelId) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token != 0) hash ^= Token.GetHashCode();
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Token);
      }
      if (ChannelId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(channel_chat_req other) {
      if (other == null) {
        return;
      }
      if (other.Token != 0) {
        Token = other.Token;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Token = input.ReadUInt32();
            break;
          }
          case 16: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class channel_chat_ntf : pb::IMessage<channel_chat_ntf> {
    private static readonly pb::MessageParser<channel_chat_ntf> _parser = new pb::MessageParser<channel_chat_ntf>(() => new channel_chat_ntf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<channel_chat_ntf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_chat_ntf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_chat_ntf(channel_chat_ntf other) : this() {
      token_ = other.token_;
      channelId_ = other.channelId_;
      chatId_ = other.chatId_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public channel_chat_ntf Clone() {
      return new channel_chat_ntf(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private uint token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 2;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "chat_id" field.</summary>
    public const int ChatIdFieldNumber = 3;
    private uint chatId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChatId {
      get { return chatId_; }
      set {
        chatId_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as channel_chat_ntf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(channel_chat_ntf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (ChannelId != other.ChannelId) return false;
      if (ChatId != other.ChatId) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token != 0) hash ^= Token.GetHashCode();
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      if (ChatId != 0) hash ^= ChatId.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Token);
      }
      if (ChannelId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChannelId);
      }
      if (ChatId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChatId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      if (ChatId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatId);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(channel_chat_ntf other) {
      if (other == null) {
        return;
      }
      if (other.Token != 0) {
        Token = other.Token;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.ChatId != 0) {
        ChatId = other.ChatId;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Token = input.ReadUInt32();
            break;
          }
          case 16: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 24: {
            ChatId = input.ReadUInt32();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class system_chat_req : pb::IMessage<system_chat_req> {
    private static readonly pb::MessageParser<system_chat_req> _parser = new pb::MessageParser<system_chat_req>(() => new system_chat_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<system_chat_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public system_chat_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public system_chat_req(system_chat_req other) : this() {
      channel_ = other.channel_;
      flags_ = other.flags_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public system_chat_req Clone() {
      return new system_chat_req(this);
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private uint channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 2;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as system_chat_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(system_chat_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (Flags != other.Flags) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Channel);
      }
      if (Flags != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Flags);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(system_chat_req other) {
      if (other == null) {
        return;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Channel = input.ReadUInt32();
            break;
          }
          case 16: {
            Flags = input.ReadUInt32();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class system_chat_ntf : pb::IMessage<system_chat_ntf> {
    private static readonly pb::MessageParser<system_chat_ntf> _parser = new pb::MessageParser<system_chat_ntf>(() => new system_chat_ntf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<system_chat_ntf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public system_chat_ntf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public system_chat_ntf(system_chat_ntf other) : this() {
      channelId_ = other.channelId_;
      flags_ = other.flags_;
      text_ = other.text_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public system_chat_ntf Clone() {
      return new system_chat_ntf(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private uint channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 2;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as system_chat_ntf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(system_chat_ntf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (Flags != other.Flags) return false;
      if (Text != other.Text) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChannelId);
      }
      if (Flags != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Flags);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelId);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(system_chat_ntf other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChannelId = input.ReadUInt32();
            break;
          }
          case 16: {
            Flags = input.ReadUInt32();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class chat_err : pb::IMessage<chat_err> {
    private static readonly pb::MessageParser<chat_err> _parser = new pb::MessageParser<chat_err>(() => new chat_err());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<chat_err> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chat.MsgReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public chat_err() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public chat_err(chat_err other) : this() {
      result_ = other.result_;
      token_ = other.token_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public chat_err Clone() {
      return new chat_err(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private uint token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as chat_err);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(chat_err other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Token != other.Token) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Token != 0) hash ^= Token.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (Token != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Token);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Token != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Token);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(chat_err other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Token != 0) {
        Token = other.Token;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            Token = input.ReadUInt32();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
