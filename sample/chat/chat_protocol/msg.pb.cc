// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chat {
class login_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<login_req> {
} _login_req_default_instance_;
class login_ackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<login_ack> {
} _login_ack_default_instance_;
class logout_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<logout_req> {
} _logout_req_default_instance_;
class user_auth_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<user_auth_req> {
} _user_auth_req_default_instance_;
class user_auth_ackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<user_auth_ack> {
} _user_auth_ack_default_instance_;
class user_info_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<user_info_req> {
} _user_info_req_default_instance_;
class user_info_ackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<user_info_ack> {
} _user_info_ack_default_instance_;
class create_channel_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_channel_req> {
} _create_channel_req_default_instance_;
class create_channel_ackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<create_channel_ack> {
} _create_channel_ack_default_instance_;
class channel_enter_ntfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<channel_enter_ntf> {
} _channel_enter_ntf_default_instance_;
class channel_enter_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<channel_enter_req> {
} _channel_enter_req_default_instance_;
class channel_enter_ackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<channel_enter_ack> {
} _channel_enter_ack_default_instance_;
class channel_leave_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<channel_leave_req> {
} _channel_leave_req_default_instance_;
class channel_leave_ackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<channel_leave_ack> {
} _channel_leave_ack_default_instance_;
class user_chat_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<user_chat_req> {
} _user_chat_req_default_instance_;
class user_chat_ntfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<user_chat_ntf> {
} _user_chat_ntf_default_instance_;
class channel_chat_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<channel_chat_req> {
} _channel_chat_req_default_instance_;
class channel_chat_ntfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<channel_chat_ntf> {
} _channel_chat_ntf_default_instance_;
class system_chat_reqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<system_chat_req> {
} _system_chat_req_default_instance_;
class system_chat_ntfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<system_chat_ntf> {
} _system_chat_ntf_default_instance_;
class chat_errDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<chat_err> {
} _chat_err_default_instance_;

namespace protobuf_msg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req, channel_wild_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req, extra_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_ack, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_ack, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_ack, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_ack, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logout_req, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_auth_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_auth_req, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_auth_req, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_auth_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_auth_ack, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_auth_ack, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_auth_ack, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_auth_ack, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_auth_ack, extra_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_req, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ack, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ack, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ack, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ack, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_info_ack, extra_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_channel_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_channel_req, channel_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_channel_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_channel_ack, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_channel_ack, channel_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_ntf, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_ntf, channel_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_req, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_req, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_req, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_req, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_req, channel_pass_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_ack, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_ack, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_ack, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_enter_ack, channel_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_leave_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_leave_req, channel_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_leave_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_leave_ack, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_leave_ack, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_leave_ack, channel_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_chat_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_chat_req, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_chat_req, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_chat_req, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_chat_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_chat_ntf, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_chat_ntf, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_chat_ntf, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_chat_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_chat_req, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_chat_req, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_chat_req, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_chat_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_chat_ntf, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_chat_ntf, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_chat_ntf, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(channel_chat_ntf, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_chat_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_chat_req, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_chat_req, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_chat_req, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_chat_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_chat_ntf, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_chat_ntf, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_chat_ntf, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_err, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_err, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_err, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chat_err, description_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(login_req)},
  { 10, -1, sizeof(login_ack)},
  { 19, -1, sizeof(logout_req)},
  { 25, -1, sizeof(user_auth_req)},
  { 32, -1, sizeof(user_auth_ack)},
  { 42, -1, sizeof(user_info_req)},
  { 48, -1, sizeof(user_info_ack)},
  { 58, -1, sizeof(create_channel_req)},
  { 64, -1, sizeof(create_channel_ack)},
  { 71, -1, sizeof(channel_enter_ntf)},
  { 78, -1, sizeof(channel_enter_req)},
  { 88, -1, sizeof(channel_enter_ack)},
  { 97, -1, sizeof(channel_leave_req)},
  { 103, -1, sizeof(channel_leave_ack)},
  { 111, -1, sizeof(user_chat_req)},
  { 119, -1, sizeof(user_chat_ntf)},
  { 127, -1, sizeof(channel_chat_req)},
  { 135, -1, sizeof(channel_chat_ntf)},
  { 144, -1, sizeof(system_chat_req)},
  { 152, -1, sizeof(system_chat_ntf)},
  { 160, -1, sizeof(chat_err)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_login_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_login_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_logout_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_user_auth_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_user_auth_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_user_info_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_user_info_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_channel_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_create_channel_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_channel_enter_ntf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_channel_enter_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_channel_enter_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_channel_leave_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_channel_leave_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_user_chat_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_user_chat_ntf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_channel_chat_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_channel_chat_ntf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_system_chat_req_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_system_chat_ntf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_chat_err_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "msg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

}  // namespace

void TableStruct::Shutdown() {
  _login_req_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _login_ack_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _logout_req_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _user_auth_req_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _user_auth_ack_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _user_info_req_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _user_info_ack_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _create_channel_req_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _create_channel_ack_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _channel_enter_ntf_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _channel_enter_req_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _channel_enter_ack_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _channel_leave_req_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _channel_leave_ack_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _user_chat_req_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _user_chat_ntf_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _channel_chat_req_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _channel_chat_ntf_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _system_chat_req_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _system_chat_ntf_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _chat_err_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _login_req_default_instance_.DefaultConstruct();
  _login_ack_default_instance_.DefaultConstruct();
  _logout_req_default_instance_.DefaultConstruct();
  _user_auth_req_default_instance_.DefaultConstruct();
  _user_auth_ack_default_instance_.DefaultConstruct();
  _user_info_req_default_instance_.DefaultConstruct();
  _user_info_ack_default_instance_.DefaultConstruct();
  _create_channel_req_default_instance_.DefaultConstruct();
  _create_channel_ack_default_instance_.DefaultConstruct();
  _channel_enter_ntf_default_instance_.DefaultConstruct();
  _channel_enter_req_default_instance_.DefaultConstruct();
  _channel_enter_ack_default_instance_.DefaultConstruct();
  _channel_leave_req_default_instance_.DefaultConstruct();
  _channel_leave_ack_default_instance_.DefaultConstruct();
  _user_chat_req_default_instance_.DefaultConstruct();
  _user_chat_ntf_default_instance_.DefaultConstruct();
  _channel_chat_req_default_instance_.DefaultConstruct();
  _channel_chat_ntf_default_instance_.DefaultConstruct();
  _system_chat_req_default_instance_.DefaultConstruct();
  _system_chat_ntf_default_instance_.DefaultConstruct();
  _chat_err_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\tmsg.proto\022\004chat\"_\n\tlogin_req\022\017\n\007user_i"
      "d\030\001 \001(\004\022\014\n\004nick\030\002 \001(\t\022\016\n\006server\030\003 \001(\t\022\024\n"
      "\014channel_wild\030\004 \001(\t\022\r\n\005extra\030\005 \001(\t\"L\n\tlo"
      "gin_ack\022\016\n\006result\030\001 \001(\005\022\017\n\007chat_id\030\002 \001(\r"
      "\022\017\n\007user_id\030\003 \001(\004\022\r\n\005token\030\004 \001(\t\"\035\n\nlogo"
      "ut_req\022\017\n\007user_id\030\001 \001(\004\"/\n\ruser_auth_req"
      "\022\017\n\007user_id\030\001 \001(\004\022\r\n\005token\030\002 \001(\t\"^\n\ruser"
      "_auth_ack\022\016\n\006result\030\001 \001(\005\022\017\n\007chat_id\030\002 \001"
      "(\r\022\017\n\007user_id\030\003 \001(\004\022\014\n\004nick\030\004 \001(\t\022\r\n\005ext"
      "ra\030\005 \001(\t\" \n\ruser_info_req\022\017\n\007user_id\030\001 \001"
      "(\004\"^\n\ruser_info_ack\022\016\n\006result\030\001 \001(\005\022\017\n\007c"
      "hat_id\030\002 \001(\r\022\017\n\007user_id\030\003 \001(\004\022\014\n\004nick\030\004 "
      "\001(\t\022\r\n\005extra\030\005 \001(\t\"*\n\022create_channel_req"
      "\022\024\n\014channel_name\030\001 \001(\t\">\n\022create_channel"
      "_ack\022\024\n\014channel_name\030\001 \001(\t\022\022\n\nchannel_id"
      "\030\002 \001(\r\"=\n\021channel_enter_ntf\022\022\n\nchannel_i"
      "d\030\001 \001(\r\022\024\n\014channel_name\030\002 \001(\t\"\322\001\n\021channe"
      "l_enter_req\022\r\n\005token\030\001 \001(\r\0220\n\004type\030\002 \001(\016"
      "2\".chat.channel_enter_req.enter_type\022\022\n\n"
      "channel_id\030\003 \001(\r\022\024\n\014channel_name\030\004 \001(\t\022\024"
      "\n\014channel_pass\030\005 \001(\t\"<\n\nenter_type\022\014\n\010WI"
      "LDCARD\020\000\022\020\n\014CHANNEL_NAME\020\001\022\016\n\nCHANNEL_ID"
      "\020\002\"\\\n\021channel_enter_ack\022\016\n\006result\030\001 \001(\005\022"
      "\r\n\005token\030\002 \001(\r\022\022\n\nchannel_id\030\003 \001(\r\022\024\n\014ch"
      "annel_name\030\004 \001(\t\"\'\n\021channel_leave_req\022\022\n"
      "\nchannel_id\030\001 \001(\r\"M\n\021channel_leave_ack\022\016"
      "\n\006result\030\001 \001(\005\022\022\n\nchannel_id\030\002 \001(\r\022\024\n\014ch"
      "annel_name\030\003 \001(\t\"=\n\ruser_chat_req\022\r\n\005tok"
      "en\030\001 \001(\r\022\017\n\007chat_id\030\002 \001(\r\022\014\n\004text\030\003 \001(\t\""
      "=\n\ruser_chat_ntf\022\r\n\005token\030\001 \001(\r\022\017\n\007chat_"
      "id\030\002 \001(\r\022\014\n\004text\030\003 \001(\t\"C\n\020channel_chat_r"
      "eq\022\r\n\005token\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001(\r\022\014\n"
      "\004text\030\003 \001(\t\"T\n\020channel_chat_ntf\022\r\n\005token"
      "\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001(\r\022\017\n\007chat_id\030\003 "
      "\001(\r\022\014\n\004text\030\004 \001(\t\"\?\n\017system_chat_req\022\017\n\007"
      "channel\030\001 \001(\r\022\r\n\005flags\030\002 \001(\r\022\014\n\004text\030\003 \001"
      "(\t\"B\n\017system_chat_ntf\022\022\n\nchannel_id\030\001 \001("
      "\r\022\r\n\005flags\030\002 \001(\r\022\014\n\004text\030\003 \001(\t\">\n\010chat_e"
      "rr\022\016\n\006result\030\001 \001(\005\022\r\n\005token\030\002 \001(\r\022\023\n\013des"
      "cription\030\003 \001(\t*\253\004\n\006MSG_ID\022\r\n\tMSG_BEGIN\020\000"
      "\022\025\n\020MSG_USERAUTH_REQ\020\201\002\022\025\n\020MSG_USERAUTH_"
      "ACK\020\202\002\022\032\n\025MSG_CHANNEL_ENTER_NTF\020\204\002\022\025\n\020MS"
      "G_USERINFO_REQ\020\201 \022\025\n\020MSG_USERINFO_ACK\020\202 "
      "\022\032\n\025MSG_CHANNEL_ENTER_REQ\020\203 \022\032\n\025MSG_CHAN"
      "NEL_ENTER_ACK\020\204 \022\032\n\025MSG_CHANNEL_LEAVE_RE"
      "Q\020\205 \022\032\n\025MSG_CHANNEL_LEAVE_ACK\020\206 \022\026\n\021MSG_"
      "USER_CHAT_REQ\020\207 \022\026\n\021MSG_USER_CHAT_NTF\020\210 "
      "\022\031\n\024MSG_CHANNEL_CHAT_REQ\020\211 \022\031\n\024MSG_CHANN"
      "EL_CHAT_NTF\020\212 \022\021\n\014MSG_CHAT_ERR\020\214 \022\025\n\020MSG"
      "_SYS_CHAT_NTF\020\216 \022\021\n\rMSG_LOGIN_REQ\020\001\022\021\n\rM"
      "SG_LOGIN_ACK\020\002\022\022\n\016MSG_LOGOUT_REQ\020\003\022\022\n\016MS"
      "G_LOGOUT_ACK\020\004\022\032\n\026MSG_CREATE_CHANNEL_REQ"
      "\020\005\022\032\n\026MSG_CREATE_CHANNEL_ACK\020\006\022\024\n\020MSG_SY"
      "S_CHAT_REQ\020\007*O\n\006CHAT_T\022\007\n\003USR\020\000\022\013\n\007USR_P"
      "2P\020\001\022\014\n\010SYS_NOTE\020\002\022\021\n\rSYS_IMPORTANT\020\003\022\016\n"
      "\nSYS_SCREEN\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2221);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_msg_2eproto

const ::google::protobuf::EnumDescriptor* channel_enter_req_enter_type_descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_enum_descriptors[0];
}
bool channel_enter_req_enter_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const channel_enter_req_enter_type channel_enter_req::WILDCARD;
const channel_enter_req_enter_type channel_enter_req::CHANNEL_NAME;
const channel_enter_req_enter_type channel_enter_req::CHANNEL_ID;
const channel_enter_req_enter_type channel_enter_req::enter_type_MIN;
const channel_enter_req_enter_type channel_enter_req::enter_type_MAX;
const int channel_enter_req::enter_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MSG_ID_descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_enum_descriptors[1];
}
bool MSG_ID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 257:
    case 258:
    case 260:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 4106:
    case 4108:
    case 4110:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHAT_T_descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_enum_descriptors[2];
}
bool CHAT_T_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int login_req::kUserIdFieldNumber;
const int login_req::kNickFieldNumber;
const int login_req::kServerFieldNumber;
const int login_req::kChannelWildFieldNumber;
const int login_req::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login_req::login_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.login_req)
}
login_req::login_req(const login_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nick().size() > 0) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server().size() > 0) {
    server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
  }
  channel_wild_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_wild().size() > 0) {
    channel_wild_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_wild_);
  }
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extra().size() > 0) {
    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:chat.login_req)
}

void login_req::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_wild_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

login_req::~login_req() {
  // @@protoc_insertion_point(destructor:chat.login_req)
  SharedDtor();
}

void login_req::SharedDtor() {
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_wild_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void login_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_req::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const login_req& login_req::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

login_req* login_req::New(::google::protobuf::Arena* arena) const {
  login_req* n = new login_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void login_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.login_req)
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_wild_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool login_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.login_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nick = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick().data(), static_cast<int>(this->nick().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.login_req.nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server().data(), static_cast<int>(this->server().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.login_req.server"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel_wild = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_wild()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_wild().data(), static_cast<int>(this->channel_wild().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.login_req.channel_wild"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string extra = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extra().data(), static_cast<int>(this->extra().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.login_req.extra"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.login_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.login_req)
  return false;
#undef DO_
}

void login_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.login_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.login_req.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nick(), output);
  }

  // string server = 3;
  if (this->server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server().data(), static_cast<int>(this->server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.login_req.server");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server(), output);
  }

  // string channel_wild = 4;
  if (this->channel_wild().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_wild().data(), static_cast<int>(this->channel_wild().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.login_req.channel_wild");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->channel_wild(), output);
  }

  // string extra = 5;
  if (this->extra().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.login_req.extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extra(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.login_req)
}

::google::protobuf::uint8* login_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.login_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.login_req.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  // string server = 3;
  if (this->server().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server().data(), static_cast<int>(this->server().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.login_req.server");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server(), target);
  }

  // string channel_wild = 4;
  if (this->channel_wild().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_wild().data(), static_cast<int>(this->channel_wild().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.login_req.channel_wild");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel_wild(), target);
  }

  // string extra = 5;
  if (this->extra().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.login_req.extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extra(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.login_req)
  return target;
}

size_t login_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.login_req)
  size_t total_size = 0;

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  // string server = 3;
  if (this->server().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server());
  }

  // string channel_wild = 4;
  if (this->channel_wild().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_wild());
  }

  // string extra = 5;
  if (this->extra().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extra());
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.login_req)
  GOOGLE_DCHECK_NE(&from, this);
  const login_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const login_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.login_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.login_req)
    MergeFrom(*source);
  }
}

void login_req::MergeFrom(const login_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.login_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.server().size() > 0) {

    server_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_);
  }
  if (from.channel_wild().size() > 0) {

    channel_wild_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_wild_);
  }
  if (from.extra().size() > 0) {

    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void login_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_req::CopyFrom(const login_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_req::IsInitialized() const {
  return true;
}

void login_req::Swap(login_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login_req::InternalSwap(login_req* other) {
  nick_.Swap(&other->nick_);
  server_.Swap(&other->server_);
  channel_wild_.Swap(&other->channel_wild_);
  extra_.Swap(&other->extra_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata login_req::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// login_req

// uint64 user_id = 1;
void login_req::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 login_req::user_id() const {
  // @@protoc_insertion_point(field_get:chat.login_req.user_id)
  return user_id_;
}
void login_req::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.login_req.user_id)
}

// string nick = 2;
void login_req::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& login_req::nick() const {
  // @@protoc_insertion_point(field_get:chat.login_req.nick)
  return nick_.GetNoArena();
}
void login_req::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.login_req.nick)
}
#if LANG_CXX11
void login_req::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.login_req.nick)
}
#endif
void login_req::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.login_req.nick)
}
void login_req::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.login_req.nick)
}
::std::string* login_req::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.login_req.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* login_req::release_nick() {
  // @@protoc_insertion_point(field_release:chat.login_req.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void login_req::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.login_req.nick)
}

// string server = 3;
void login_req::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& login_req::server() const {
  // @@protoc_insertion_point(field_get:chat.login_req.server)
  return server_.GetNoArena();
}
void login_req::set_server(const ::std::string& value) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.login_req.server)
}
#if LANG_CXX11
void login_req::set_server(::std::string&& value) {
  
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.login_req.server)
}
#endif
void login_req::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.login_req.server)
}
void login_req::set_server(const char* value, size_t size) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.login_req.server)
}
::std::string* login_req::mutable_server() {
  
  // @@protoc_insertion_point(field_mutable:chat.login_req.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* login_req::release_server() {
  // @@protoc_insertion_point(field_release:chat.login_req.server)
  
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void login_req::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    
  } else {
    
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:chat.login_req.server)
}

// string channel_wild = 4;
void login_req::clear_channel_wild() {
  channel_wild_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& login_req::channel_wild() const {
  // @@protoc_insertion_point(field_get:chat.login_req.channel_wild)
  return channel_wild_.GetNoArena();
}
void login_req::set_channel_wild(const ::std::string& value) {
  
  channel_wild_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.login_req.channel_wild)
}
#if LANG_CXX11
void login_req::set_channel_wild(::std::string&& value) {
  
  channel_wild_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.login_req.channel_wild)
}
#endif
void login_req::set_channel_wild(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_wild_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.login_req.channel_wild)
}
void login_req::set_channel_wild(const char* value, size_t size) {
  
  channel_wild_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.login_req.channel_wild)
}
::std::string* login_req::mutable_channel_wild() {
  
  // @@protoc_insertion_point(field_mutable:chat.login_req.channel_wild)
  return channel_wild_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* login_req::release_channel_wild() {
  // @@protoc_insertion_point(field_release:chat.login_req.channel_wild)
  
  return channel_wild_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void login_req::set_allocated_channel_wild(::std::string* channel_wild) {
  if (channel_wild != NULL) {
    
  } else {
    
  }
  channel_wild_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_wild);
  // @@protoc_insertion_point(field_set_allocated:chat.login_req.channel_wild)
}

// string extra = 5;
void login_req::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& login_req::extra() const {
  // @@protoc_insertion_point(field_get:chat.login_req.extra)
  return extra_.GetNoArena();
}
void login_req::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.login_req.extra)
}
#if LANG_CXX11
void login_req::set_extra(::std::string&& value) {
  
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.login_req.extra)
}
#endif
void login_req::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.login_req.extra)
}
void login_req::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.login_req.extra)
}
::std::string* login_req::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:chat.login_req.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* login_req::release_extra() {
  // @@protoc_insertion_point(field_release:chat.login_req.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void login_req::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:chat.login_req.extra)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int login_ack::kResultFieldNumber;
const int login_ack::kChatIdFieldNumber;
const int login_ack::kUserIdFieldNumber;
const int login_ack::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

login_ack::login_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.login_ack)
}
login_ack::login_ack(const login_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:chat.login_ack)
}

void login_ack::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(user_id_));
  _cached_size_ = 0;
}

login_ack::~login_ack() {
  // @@protoc_insertion_point(destructor:chat.login_ack)
  SharedDtor();
}

void login_ack::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void login_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_ack::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const login_ack& login_ack::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

login_ack* login_ack::New(::google::protobuf::Arena* arena) const {
  login_ack* n = new login_ack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void login_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.login_ack)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(user_id_));
}

bool login_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.login_ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.login_ack.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.login_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.login_ack)
  return false;
#undef DO_
}

void login_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.login_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chat_id(), output);
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_id(), output);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.login_ack.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.login_ack)
}

::google::protobuf::uint8* login_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.login_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chat_id(), target);
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_id(), target);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.login_ack.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.login_ack)
  return target;
}

size_t login_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.login_ack)
  size_t total_size = 0;

  // string token = 4;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chat_id());
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.login_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const login_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const login_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.login_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.login_ack)
    MergeFrom(*source);
  }
}

void login_ack::MergeFrom(const login_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.login_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.chat_id() != 0) {
    set_chat_id(from.chat_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void login_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.login_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_ack::CopyFrom(const login_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.login_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_ack::IsInitialized() const {
  return true;
}

void login_ack::Swap(login_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void login_ack::InternalSwap(login_ack* other) {
  token_.Swap(&other->token_);
  std::swap(result_, other->result_);
  std::swap(chat_id_, other->chat_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata login_ack::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// login_ack

// int32 result = 1;
void login_ack::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 login_ack::result() const {
  // @@protoc_insertion_point(field_get:chat.login_ack.result)
  return result_;
}
void login_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.login_ack.result)
}

// uint32 chat_id = 2;
void login_ack::clear_chat_id() {
  chat_id_ = 0u;
}
::google::protobuf::uint32 login_ack::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.login_ack.chat_id)
  return chat_id_;
}
void login_ack::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.login_ack.chat_id)
}

// uint64 user_id = 3;
void login_ack::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 login_ack::user_id() const {
  // @@protoc_insertion_point(field_get:chat.login_ack.user_id)
  return user_id_;
}
void login_ack::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.login_ack.user_id)
}

// string token = 4;
void login_ack::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& login_ack::token() const {
  // @@protoc_insertion_point(field_get:chat.login_ack.token)
  return token_.GetNoArena();
}
void login_ack::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.login_ack.token)
}
#if LANG_CXX11
void login_ack::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.login_ack.token)
}
#endif
void login_ack::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.login_ack.token)
}
void login_ack::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.login_ack.token)
}
::std::string* login_ack::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:chat.login_ack.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* login_ack::release_token() {
  // @@protoc_insertion_point(field_release:chat.login_ack.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void login_ack::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:chat.login_ack.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int logout_req::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

logout_req::logout_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.logout_req)
}
logout_req::logout_req(const logout_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:chat.logout_req)
}

void logout_req::SharedCtor() {
  user_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

logout_req::~logout_req() {
  // @@protoc_insertion_point(destructor:chat.logout_req)
  SharedDtor();
}

void logout_req::SharedDtor() {
}

void logout_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logout_req::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const logout_req& logout_req::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

logout_req* logout_req::New(::google::protobuf::Arena* arena) const {
  logout_req* n = new logout_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void logout_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.logout_req)
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool logout_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.logout_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.logout_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.logout_req)
  return false;
#undef DO_
}

void logout_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.logout_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.logout_req)
}

::google::protobuf::uint8* logout_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.logout_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.logout_req)
  return target;
}

size_t logout_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.logout_req)
  size_t total_size = 0;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logout_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.logout_req)
  GOOGLE_DCHECK_NE(&from, this);
  const logout_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const logout_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.logout_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.logout_req)
    MergeFrom(*source);
  }
}

void logout_req::MergeFrom(const logout_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.logout_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void logout_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.logout_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logout_req::CopyFrom(const logout_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.logout_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logout_req::IsInitialized() const {
  return true;
}

void logout_req::Swap(logout_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void logout_req::InternalSwap(logout_req* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata logout_req::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// logout_req

// uint64 user_id = 1;
void logout_req::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 logout_req::user_id() const {
  // @@protoc_insertion_point(field_get:chat.logout_req.user_id)
  return user_id_;
}
void logout_req::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.logout_req.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_auth_req::kUserIdFieldNumber;
const int user_auth_req::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_auth_req::user_auth_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.user_auth_req)
}
user_auth_req::user_auth_req(const user_auth_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:chat.user_auth_req)
}

void user_auth_req::SharedCtor() {
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

user_auth_req::~user_auth_req() {
  // @@protoc_insertion_point(destructor:chat.user_auth_req)
  SharedDtor();
}

void user_auth_req::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void user_auth_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_auth_req::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const user_auth_req& user_auth_req::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

user_auth_req* user_auth_req::New(::google::protobuf::Arena* arena) const {
  user_auth_req* n = new user_auth_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_auth_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.user_auth_req)
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool user_auth_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.user_auth_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.user_auth_req.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.user_auth_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.user_auth_req)
  return false;
#undef DO_
}

void user_auth_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.user_auth_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_auth_req.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.user_auth_req)
}

::google::protobuf::uint8* user_auth_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.user_auth_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_auth_req.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.user_auth_req)
  return target;
}

size_t user_auth_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.user_auth_req)
  size_t total_size = 0;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_auth_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.user_auth_req)
  GOOGLE_DCHECK_NE(&from, this);
  const user_auth_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_auth_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.user_auth_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.user_auth_req)
    MergeFrom(*source);
  }
}

void user_auth_req::MergeFrom(const user_auth_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.user_auth_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void user_auth_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.user_auth_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_auth_req::CopyFrom(const user_auth_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.user_auth_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_auth_req::IsInitialized() const {
  return true;
}

void user_auth_req::Swap(user_auth_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_auth_req::InternalSwap(user_auth_req* other) {
  token_.Swap(&other->token_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_auth_req::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_auth_req

// uint64 user_id = 1;
void user_auth_req::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 user_auth_req::user_id() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_req.user_id)
  return user_id_;
}
void user_auth_req::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_auth_req.user_id)
}

// string token = 2;
void user_auth_req::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& user_auth_req::token() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_req.token)
  return token_.GetNoArena();
}
void user_auth_req::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_auth_req.token)
}
#if LANG_CXX11
void user_auth_req::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_auth_req.token)
}
#endif
void user_auth_req::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_auth_req.token)
}
void user_auth_req::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_auth_req.token)
}
::std::string* user_auth_req::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_auth_req.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* user_auth_req::release_token() {
  // @@protoc_insertion_point(field_release:chat.user_auth_req.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_auth_req::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:chat.user_auth_req.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_auth_ack::kResultFieldNumber;
const int user_auth_ack::kChatIdFieldNumber;
const int user_auth_ack::kUserIdFieldNumber;
const int user_auth_ack::kNickFieldNumber;
const int user_auth_ack::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_auth_ack::user_auth_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.user_auth_ack)
}
user_auth_ack::user_auth_ack(const user_auth_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nick().size() > 0) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extra().size() > 0) {
    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:chat.user_auth_ack)
}

void user_auth_ack::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(user_id_));
  _cached_size_ = 0;
}

user_auth_ack::~user_auth_ack() {
  // @@protoc_insertion_point(destructor:chat.user_auth_ack)
  SharedDtor();
}

void user_auth_ack::SharedDtor() {
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void user_auth_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_auth_ack::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const user_auth_ack& user_auth_ack::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

user_auth_ack* user_auth_ack::New(::google::protobuf::Arena* arena) const {
  user_auth_ack* n = new user_auth_ack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_auth_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.user_auth_ack)
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(user_id_));
}

bool user_auth_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.user_auth_ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nick = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick().data(), static_cast<int>(this->nick().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.user_auth_ack.nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string extra = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extra().data(), static_cast<int>(this->extra().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.user_auth_ack.extra"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.user_auth_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.user_auth_ack)
  return false;
#undef DO_
}

void user_auth_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.user_auth_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chat_id(), output);
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_id(), output);
  }

  // string nick = 4;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_auth_ack.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nick(), output);
  }

  // string extra = 5;
  if (this->extra().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_auth_ack.extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extra(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.user_auth_ack)
}

::google::protobuf::uint8* user_auth_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.user_auth_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chat_id(), target);
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_id(), target);
  }

  // string nick = 4;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_auth_ack.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick(), target);
  }

  // string extra = 5;
  if (this->extra().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_auth_ack.extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extra(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.user_auth_ack)
  return target;
}

size_t user_auth_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.user_auth_ack)
  size_t total_size = 0;

  // string nick = 4;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  // string extra = 5;
  if (this->extra().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extra());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chat_id());
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_auth_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.user_auth_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const user_auth_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_auth_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.user_auth_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.user_auth_ack)
    MergeFrom(*source);
  }
}

void user_auth_ack::MergeFrom(const user_auth_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.user_auth_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.extra().size() > 0) {

    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.chat_id() != 0) {
    set_chat_id(from.chat_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void user_auth_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.user_auth_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_auth_ack::CopyFrom(const user_auth_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.user_auth_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_auth_ack::IsInitialized() const {
  return true;
}

void user_auth_ack::Swap(user_auth_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_auth_ack::InternalSwap(user_auth_ack* other) {
  nick_.Swap(&other->nick_);
  extra_.Swap(&other->extra_);
  std::swap(result_, other->result_);
  std::swap(chat_id_, other->chat_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_auth_ack::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_auth_ack

// int32 result = 1;
void user_auth_ack::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 user_auth_ack::result() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_ack.result)
  return result_;
}
void user_auth_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.user_auth_ack.result)
}

// uint32 chat_id = 2;
void user_auth_ack::clear_chat_id() {
  chat_id_ = 0u;
}
::google::protobuf::uint32 user_auth_ack::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_ack.chat_id)
  return chat_id_;
}
void user_auth_ack::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_auth_ack.chat_id)
}

// uint64 user_id = 3;
void user_auth_ack::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 user_auth_ack::user_id() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_ack.user_id)
  return user_id_;
}
void user_auth_ack::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_auth_ack.user_id)
}

// string nick = 4;
void user_auth_ack::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& user_auth_ack::nick() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_ack.nick)
  return nick_.GetNoArena();
}
void user_auth_ack::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_auth_ack.nick)
}
#if LANG_CXX11
void user_auth_ack::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_auth_ack.nick)
}
#endif
void user_auth_ack::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_auth_ack.nick)
}
void user_auth_ack::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_auth_ack.nick)
}
::std::string* user_auth_ack::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_auth_ack.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* user_auth_ack::release_nick() {
  // @@protoc_insertion_point(field_release:chat.user_auth_ack.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_auth_ack::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.user_auth_ack.nick)
}

// string extra = 5;
void user_auth_ack::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& user_auth_ack::extra() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_ack.extra)
  return extra_.GetNoArena();
}
void user_auth_ack::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_auth_ack.extra)
}
#if LANG_CXX11
void user_auth_ack::set_extra(::std::string&& value) {
  
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_auth_ack.extra)
}
#endif
void user_auth_ack::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_auth_ack.extra)
}
void user_auth_ack::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_auth_ack.extra)
}
::std::string* user_auth_ack::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_auth_ack.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* user_auth_ack::release_extra() {
  // @@protoc_insertion_point(field_release:chat.user_auth_ack.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_auth_ack::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:chat.user_auth_ack.extra)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_info_req::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_info_req::user_info_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.user_info_req)
}
user_info_req::user_info_req(const user_info_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:chat.user_info_req)
}

void user_info_req::SharedCtor() {
  user_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

user_info_req::~user_info_req() {
  // @@protoc_insertion_point(destructor:chat.user_info_req)
  SharedDtor();
}

void user_info_req::SharedDtor() {
}

void user_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info_req::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const user_info_req& user_info_req::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

user_info_req* user_info_req::New(::google::protobuf::Arena* arena) const {
  user_info_req* n = new user_info_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_info_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.user_info_req)
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool user_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.user_info_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.user_info_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.user_info_req)
  return false;
#undef DO_
}

void user_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.user_info_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.user_info_req)
}

::google::protobuf::uint8* user_info_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.user_info_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.user_info_req)
  return target;
}

size_t user_info_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.user_info_req)
  size_t total_size = 0;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.user_info_req)
  GOOGLE_DCHECK_NE(&from, this);
  const user_info_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_info_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.user_info_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.user_info_req)
    MergeFrom(*source);
  }
}

void user_info_req::MergeFrom(const user_info_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.user_info_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void user_info_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.user_info_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info_req::CopyFrom(const user_info_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.user_info_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_req::IsInitialized() const {
  return true;
}

void user_info_req::Swap(user_info_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_info_req::InternalSwap(user_info_req* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_info_req::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_info_req

// uint64 user_id = 1;
void user_info_req::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 user_info_req::user_id() const {
  // @@protoc_insertion_point(field_get:chat.user_info_req.user_id)
  return user_id_;
}
void user_info_req::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_info_req.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_info_ack::kResultFieldNumber;
const int user_info_ack::kChatIdFieldNumber;
const int user_info_ack::kUserIdFieldNumber;
const int user_info_ack::kNickFieldNumber;
const int user_info_ack::kExtraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_info_ack::user_info_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.user_info_ack)
}
user_info_ack::user_info_ack(const user_info_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nick().size() > 0) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extra().size() > 0) {
    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:chat.user_info_ack)
}

void user_info_ack::SharedCtor() {
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(user_id_));
  _cached_size_ = 0;
}

user_info_ack::~user_info_ack() {
  // @@protoc_insertion_point(destructor:chat.user_info_ack)
  SharedDtor();
}

void user_info_ack::SharedDtor() {
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void user_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_info_ack::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const user_info_ack& user_info_ack::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

user_info_ack* user_info_ack::New(::google::protobuf::Arena* arena) const {
  user_info_ack* n = new user_info_ack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_info_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.user_info_ack)
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(user_id_));
}

bool user_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.user_info_ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nick = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick().data(), static_cast<int>(this->nick().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.user_info_ack.nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string extra = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extra().data(), static_cast<int>(this->extra().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.user_info_ack.extra"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.user_info_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.user_info_ack)
  return false;
#undef DO_
}

void user_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.user_info_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chat_id(), output);
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_id(), output);
  }

  // string nick = 4;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_info_ack.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nick(), output);
  }

  // string extra = 5;
  if (this->extra().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_info_ack.extra");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extra(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.user_info_ack)
}

::google::protobuf::uint8* user_info_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.user_info_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chat_id(), target);
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_id(), target);
  }

  // string nick = 4;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_info_ack.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick(), target);
  }

  // string extra = 5;
  if (this->extra().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra().data(), static_cast<int>(this->extra().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_info_ack.extra");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extra(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.user_info_ack)
  return target;
}

size_t user_info_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.user_info_ack)
  size_t total_size = 0;

  // string nick = 4;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  // string extra = 5;
  if (this->extra().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extra());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chat_id());
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.user_info_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const user_info_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_info_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.user_info_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.user_info_ack)
    MergeFrom(*source);
  }
}

void user_info_ack::MergeFrom(const user_info_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.user_info_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.extra().size() > 0) {

    extra_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.chat_id() != 0) {
    set_chat_id(from.chat_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void user_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.user_info_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info_ack::CopyFrom(const user_info_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.user_info_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_ack::IsInitialized() const {
  return true;
}

void user_info_ack::Swap(user_info_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_info_ack::InternalSwap(user_info_ack* other) {
  nick_.Swap(&other->nick_);
  extra_.Swap(&other->extra_);
  std::swap(result_, other->result_);
  std::swap(chat_id_, other->chat_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_info_ack::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_info_ack

// int32 result = 1;
void user_info_ack::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 user_info_ack::result() const {
  // @@protoc_insertion_point(field_get:chat.user_info_ack.result)
  return result_;
}
void user_info_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.user_info_ack.result)
}

// uint32 chat_id = 2;
void user_info_ack::clear_chat_id() {
  chat_id_ = 0u;
}
::google::protobuf::uint32 user_info_ack::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.user_info_ack.chat_id)
  return chat_id_;
}
void user_info_ack::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_info_ack.chat_id)
}

// uint64 user_id = 3;
void user_info_ack::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 user_info_ack::user_id() const {
  // @@protoc_insertion_point(field_get:chat.user_info_ack.user_id)
  return user_id_;
}
void user_info_ack::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_info_ack.user_id)
}

// string nick = 4;
void user_info_ack::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& user_info_ack::nick() const {
  // @@protoc_insertion_point(field_get:chat.user_info_ack.nick)
  return nick_.GetNoArena();
}
void user_info_ack::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_info_ack.nick)
}
#if LANG_CXX11
void user_info_ack::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_info_ack.nick)
}
#endif
void user_info_ack::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_info_ack.nick)
}
void user_info_ack::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_info_ack.nick)
}
::std::string* user_info_ack::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_info_ack.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* user_info_ack::release_nick() {
  // @@protoc_insertion_point(field_release:chat.user_info_ack.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_info_ack::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.user_info_ack.nick)
}

// string extra = 5;
void user_info_ack::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& user_info_ack::extra() const {
  // @@protoc_insertion_point(field_get:chat.user_info_ack.extra)
  return extra_.GetNoArena();
}
void user_info_ack::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_info_ack.extra)
}
#if LANG_CXX11
void user_info_ack::set_extra(::std::string&& value) {
  
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_info_ack.extra)
}
#endif
void user_info_ack::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_info_ack.extra)
}
void user_info_ack::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_info_ack.extra)
}
::std::string* user_info_ack::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_info_ack.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* user_info_ack::release_extra() {
  // @@protoc_insertion_point(field_release:chat.user_info_ack.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_info_ack::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:chat.user_info_ack.extra)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_channel_req::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_channel_req::create_channel_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.create_channel_req)
}
create_channel_req::create_channel_req(const create_channel_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_name().size() > 0) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.create_channel_req)
}

void create_channel_req::SharedCtor() {
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

create_channel_req::~create_channel_req() {
  // @@protoc_insertion_point(destructor:chat.create_channel_req)
  SharedDtor();
}

void create_channel_req::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void create_channel_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_channel_req::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_channel_req& create_channel_req::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_channel_req* create_channel_req::New(::google::protobuf::Arena* arena) const {
  create_channel_req* n = new create_channel_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_channel_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.create_channel_req)
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool create_channel_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.create_channel_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.create_channel_req.channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.create_channel_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.create_channel_req)
  return false;
#undef DO_
}

void create_channel_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.create_channel_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.create_channel_req.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.create_channel_req)
}

::google::protobuf::uint8* create_channel_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.create_channel_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.create_channel_req.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.create_channel_req)
  return target;
}

size_t create_channel_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.create_channel_req)
  size_t total_size = 0;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_channel_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.create_channel_req)
  GOOGLE_DCHECK_NE(&from, this);
  const create_channel_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_channel_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.create_channel_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.create_channel_req)
    MergeFrom(*source);
  }
}

void create_channel_req::MergeFrom(const create_channel_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.create_channel_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
}

void create_channel_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.create_channel_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_channel_req::CopyFrom(const create_channel_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.create_channel_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_channel_req::IsInitialized() const {
  return true;
}

void create_channel_req::Swap(create_channel_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_channel_req::InternalSwap(create_channel_req* other) {
  channel_name_.Swap(&other->channel_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_channel_req::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_channel_req

// string channel_name = 1;
void create_channel_req::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& create_channel_req::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.create_channel_req.channel_name)
  return channel_name_.GetNoArena();
}
void create_channel_req::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.create_channel_req.channel_name)
}
#if LANG_CXX11
void create_channel_req::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.create_channel_req.channel_name)
}
#endif
void create_channel_req::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.create_channel_req.channel_name)
}
void create_channel_req::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.create_channel_req.channel_name)
}
::std::string* create_channel_req::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.create_channel_req.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* create_channel_req::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.create_channel_req.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void create_channel_req::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.create_channel_req.channel_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int create_channel_ack::kChannelNameFieldNumber;
const int create_channel_ack::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

create_channel_ack::create_channel_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.create_channel_ack)
}
create_channel_ack::create_channel_ack(const create_channel_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_name().size() > 0) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:chat.create_channel_ack)
}

void create_channel_ack::SharedCtor() {
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = 0u;
  _cached_size_ = 0;
}

create_channel_ack::~create_channel_ack() {
  // @@protoc_insertion_point(destructor:chat.create_channel_ack)
  SharedDtor();
}

void create_channel_ack::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void create_channel_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_channel_ack::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const create_channel_ack& create_channel_ack::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

create_channel_ack* create_channel_ack::New(::google::protobuf::Arena* arena) const {
  create_channel_ack* n = new create_channel_ack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void create_channel_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.create_channel_ack)
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = 0u;
}

bool create_channel_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.create_channel_ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.create_channel_ack.channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.create_channel_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.create_channel_ack)
  return false;
#undef DO_
}

void create_channel_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.create_channel_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.create_channel_ack.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.create_channel_ack)
}

::google::protobuf::uint8* create_channel_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.create_channel_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.create_channel_ack.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.create_channel_ack)
  return target;
}

size_t create_channel_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.create_channel_ack)
  size_t total_size = 0;

  // string channel_name = 1;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_channel_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.create_channel_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const create_channel_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const create_channel_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.create_channel_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.create_channel_ack)
    MergeFrom(*source);
  }
}

void create_channel_ack::MergeFrom(const create_channel_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.create_channel_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void create_channel_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.create_channel_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_channel_ack::CopyFrom(const create_channel_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.create_channel_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_channel_ack::IsInitialized() const {
  return true;
}

void create_channel_ack::Swap(create_channel_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void create_channel_ack::InternalSwap(create_channel_ack* other) {
  channel_name_.Swap(&other->channel_name_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata create_channel_ack::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// create_channel_ack

// string channel_name = 1;
void create_channel_ack::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& create_channel_ack::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.create_channel_ack.channel_name)
  return channel_name_.GetNoArena();
}
void create_channel_ack::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.create_channel_ack.channel_name)
}
#if LANG_CXX11
void create_channel_ack::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.create_channel_ack.channel_name)
}
#endif
void create_channel_ack::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.create_channel_ack.channel_name)
}
void create_channel_ack::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.create_channel_ack.channel_name)
}
::std::string* create_channel_ack::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.create_channel_ack.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* create_channel_ack::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.create_channel_ack.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void create_channel_ack::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.create_channel_ack.channel_name)
}

// uint32 channel_id = 2;
void create_channel_ack::clear_channel_id() {
  channel_id_ = 0u;
}
::google::protobuf::uint32 create_channel_ack::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.create_channel_ack.channel_id)
  return channel_id_;
}
void create_channel_ack::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.create_channel_ack.channel_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channel_enter_ntf::kChannelIdFieldNumber;
const int channel_enter_ntf::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channel_enter_ntf::channel_enter_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.channel_enter_ntf)
}
channel_enter_ntf::channel_enter_ntf(const channel_enter_ntf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_name().size() > 0) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:chat.channel_enter_ntf)
}

void channel_enter_ntf::SharedCtor() {
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = 0u;
  _cached_size_ = 0;
}

channel_enter_ntf::~channel_enter_ntf() {
  // @@protoc_insertion_point(destructor:chat.channel_enter_ntf)
  SharedDtor();
}

void channel_enter_ntf::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channel_enter_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel_enter_ntf::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const channel_enter_ntf& channel_enter_ntf::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

channel_enter_ntf* channel_enter_ntf::New(::google::protobuf::Arena* arena) const {
  channel_enter_ntf* n = new channel_enter_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channel_enter_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.channel_enter_ntf)
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = 0u;
}

bool channel_enter_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.channel_enter_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.channel_enter_ntf.channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.channel_enter_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.channel_enter_ntf)
  return false;
#undef DO_
}

void channel_enter_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.channel_enter_ntf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel_id = 1;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_enter_ntf.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.channel_enter_ntf)
}

::google::protobuf::uint8* channel_enter_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.channel_enter_ntf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel_id = 1;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_enter_ntf.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.channel_enter_ntf)
  return target;
}

size_t channel_enter_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.channel_enter_ntf)
  size_t total_size = 0;

  // string channel_name = 2;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  // uint32 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel_enter_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.channel_enter_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  const channel_enter_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channel_enter_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.channel_enter_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.channel_enter_ntf)
    MergeFrom(*source);
  }
}

void channel_enter_ntf::MergeFrom(const channel_enter_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.channel_enter_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void channel_enter_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.channel_enter_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_enter_ntf::CopyFrom(const channel_enter_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.channel_enter_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_enter_ntf::IsInitialized() const {
  return true;
}

void channel_enter_ntf::Swap(channel_enter_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channel_enter_ntf::InternalSwap(channel_enter_ntf* other) {
  channel_name_.Swap(&other->channel_name_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channel_enter_ntf::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channel_enter_ntf

// uint32 channel_id = 1;
void channel_enter_ntf::clear_channel_id() {
  channel_id_ = 0u;
}
::google::protobuf::uint32 channel_enter_ntf::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ntf.channel_id)
  return channel_id_;
}
void channel_enter_ntf::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_ntf.channel_id)
}

// string channel_name = 2;
void channel_enter_ntf::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channel_enter_ntf::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ntf.channel_name)
  return channel_name_.GetNoArena();
}
void channel_enter_ntf::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_enter_ntf.channel_name)
}
#if LANG_CXX11
void channel_enter_ntf::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_enter_ntf.channel_name)
}
#endif
void channel_enter_ntf::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_enter_ntf.channel_name)
}
void channel_enter_ntf::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_enter_ntf.channel_name)
}
::std::string* channel_enter_ntf::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_enter_ntf.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channel_enter_ntf::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.channel_enter_ntf.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel_enter_ntf::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_enter_ntf.channel_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channel_enter_req::kTokenFieldNumber;
const int channel_enter_req::kTypeFieldNumber;
const int channel_enter_req::kChannelIdFieldNumber;
const int channel_enter_req::kChannelNameFieldNumber;
const int channel_enter_req::kChannelPassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channel_enter_req::channel_enter_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.channel_enter_req)
}
channel_enter_req::channel_enter_req(const channel_enter_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_name().size() > 0) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  channel_pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_pass().size() > 0) {
    channel_pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_pass_);
  }
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&token_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:chat.channel_enter_req)
}

void channel_enter_req::SharedCtor() {
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&token_)) + sizeof(channel_id_));
  _cached_size_ = 0;
}

channel_enter_req::~channel_enter_req() {
  // @@protoc_insertion_point(destructor:chat.channel_enter_req)
  SharedDtor();
}

void channel_enter_req::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channel_enter_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel_enter_req::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const channel_enter_req& channel_enter_req::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

channel_enter_req* channel_enter_req::New(::google::protobuf::Arena* arena) const {
  channel_enter_req* n = new channel_enter_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channel_enter_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.channel_enter_req)
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&token_)) + sizeof(channel_id_));
}

bool channel_enter_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.channel_enter_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.channel_enter_req.enter_type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::chat::channel_enter_req_enter_type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.channel_enter_req.channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel_pass = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_pass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_pass().data(), static_cast<int>(this->channel_pass().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.channel_enter_req.channel_pass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.channel_enter_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.channel_enter_req)
  return false;
#undef DO_
}

void channel_enter_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.channel_enter_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->token(), output);
  }

  // .chat.channel_enter_req.enter_type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // uint32 channel_id = 3;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }

  // string channel_name = 4;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_enter_req.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->channel_name(), output);
  }

  // string channel_pass = 5;
  if (this->channel_pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_pass().data(), static_cast<int>(this->channel_pass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_enter_req.channel_pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->channel_pass(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.channel_enter_req)
}

::google::protobuf::uint8* channel_enter_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.channel_enter_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->token(), target);
  }

  // .chat.channel_enter_req.enter_type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // uint32 channel_id = 3;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }

  // string channel_name = 4;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_enter_req.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel_name(), target);
  }

  // string channel_pass = 5;
  if (this->channel_pass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_pass().data(), static_cast<int>(this->channel_pass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_enter_req.channel_pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel_pass(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.channel_enter_req)
  return target;
}

size_t channel_enter_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.channel_enter_req)
  size_t total_size = 0;

  // string channel_name = 4;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  // string channel_pass = 5;
  if (this->channel_pass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_pass());
  }

  // uint32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token());
  }

  // .chat.channel_enter_req.enter_type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 channel_id = 3;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel_enter_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.channel_enter_req)
  GOOGLE_DCHECK_NE(&from, this);
  const channel_enter_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channel_enter_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.channel_enter_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.channel_enter_req)
    MergeFrom(*source);
  }
}

void channel_enter_req::MergeFrom(const channel_enter_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.channel_enter_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  if (from.channel_pass().size() > 0) {

    channel_pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_pass_);
  }
  if (from.token() != 0) {
    set_token(from.token());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void channel_enter_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.channel_enter_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_enter_req::CopyFrom(const channel_enter_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.channel_enter_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_enter_req::IsInitialized() const {
  return true;
}

void channel_enter_req::Swap(channel_enter_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channel_enter_req::InternalSwap(channel_enter_req* other) {
  channel_name_.Swap(&other->channel_name_);
  channel_pass_.Swap(&other->channel_pass_);
  std::swap(token_, other->token_);
  std::swap(type_, other->type_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channel_enter_req::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channel_enter_req

// uint32 token = 1;
void channel_enter_req::clear_token() {
  token_ = 0u;
}
::google::protobuf::uint32 channel_enter_req::token() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_req.token)
  return token_;
}
void channel_enter_req::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_req.token)
}

// .chat.channel_enter_req.enter_type type = 2;
void channel_enter_req::clear_type() {
  type_ = 0;
}
::chat::channel_enter_req_enter_type channel_enter_req::type() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_req.type)
  return static_cast< ::chat::channel_enter_req_enter_type >(type_);
}
void channel_enter_req::set_type(::chat::channel_enter_req_enter_type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_req.type)
}

// uint32 channel_id = 3;
void channel_enter_req::clear_channel_id() {
  channel_id_ = 0u;
}
::google::protobuf::uint32 channel_enter_req::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_req.channel_id)
  return channel_id_;
}
void channel_enter_req::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_req.channel_id)
}

// string channel_name = 4;
void channel_enter_req::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channel_enter_req::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_req.channel_name)
  return channel_name_.GetNoArena();
}
void channel_enter_req::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_enter_req.channel_name)
}
#if LANG_CXX11
void channel_enter_req::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_enter_req.channel_name)
}
#endif
void channel_enter_req::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_enter_req.channel_name)
}
void channel_enter_req::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_enter_req.channel_name)
}
::std::string* channel_enter_req::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_enter_req.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channel_enter_req::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.channel_enter_req.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel_enter_req::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_enter_req.channel_name)
}

// string channel_pass = 5;
void channel_enter_req::clear_channel_pass() {
  channel_pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channel_enter_req::channel_pass() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_req.channel_pass)
  return channel_pass_.GetNoArena();
}
void channel_enter_req::set_channel_pass(const ::std::string& value) {
  
  channel_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_enter_req.channel_pass)
}
#if LANG_CXX11
void channel_enter_req::set_channel_pass(::std::string&& value) {
  
  channel_pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_enter_req.channel_pass)
}
#endif
void channel_enter_req::set_channel_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_enter_req.channel_pass)
}
void channel_enter_req::set_channel_pass(const char* value, size_t size) {
  
  channel_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_enter_req.channel_pass)
}
::std::string* channel_enter_req::mutable_channel_pass() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_enter_req.channel_pass)
  return channel_pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channel_enter_req::release_channel_pass() {
  // @@protoc_insertion_point(field_release:chat.channel_enter_req.channel_pass)
  
  return channel_pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel_enter_req::set_allocated_channel_pass(::std::string* channel_pass) {
  if (channel_pass != NULL) {
    
  } else {
    
  }
  channel_pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_pass);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_enter_req.channel_pass)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channel_enter_ack::kResultFieldNumber;
const int channel_enter_ack::kTokenFieldNumber;
const int channel_enter_ack::kChannelIdFieldNumber;
const int channel_enter_ack::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channel_enter_ack::channel_enter_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.channel_enter_ack)
}
channel_enter_ack::channel_enter_ack(const channel_enter_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_name().size() > 0) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:chat.channel_enter_ack)
}

void channel_enter_ack::SharedCtor() {
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(channel_id_));
  _cached_size_ = 0;
}

channel_enter_ack::~channel_enter_ack() {
  // @@protoc_insertion_point(destructor:chat.channel_enter_ack)
  SharedDtor();
}

void channel_enter_ack::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channel_enter_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel_enter_ack::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const channel_enter_ack& channel_enter_ack::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

channel_enter_ack* channel_enter_ack::New(::google::protobuf::Arena* arena) const {
  channel_enter_ack* n = new channel_enter_ack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channel_enter_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.channel_enter_ack)
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(channel_id_));
}

bool channel_enter_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.channel_enter_ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.channel_enter_ack.channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.channel_enter_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.channel_enter_ack)
  return false;
#undef DO_
}

void channel_enter_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.channel_enter_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // uint32 token = 2;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->token(), output);
  }

  // uint32 channel_id = 3;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }

  // string channel_name = 4;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_enter_ack.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->channel_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.channel_enter_ack)
}

::google::protobuf::uint8* channel_enter_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.channel_enter_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // uint32 token = 2;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->token(), target);
  }

  // uint32 channel_id = 3;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }

  // string channel_name = 4;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_enter_ack.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.channel_enter_ack)
  return target;
}

size_t channel_enter_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.channel_enter_ack)
  size_t total_size = 0;

  // string channel_name = 4;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // uint32 token = 2;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token());
  }

  // uint32 channel_id = 3;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel_enter_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.channel_enter_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const channel_enter_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channel_enter_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.channel_enter_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.channel_enter_ack)
    MergeFrom(*source);
  }
}

void channel_enter_ack::MergeFrom(const channel_enter_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.channel_enter_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.token() != 0) {
    set_token(from.token());
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void channel_enter_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.channel_enter_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_enter_ack::CopyFrom(const channel_enter_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.channel_enter_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_enter_ack::IsInitialized() const {
  return true;
}

void channel_enter_ack::Swap(channel_enter_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channel_enter_ack::InternalSwap(channel_enter_ack* other) {
  channel_name_.Swap(&other->channel_name_);
  std::swap(result_, other->result_);
  std::swap(token_, other->token_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channel_enter_ack::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channel_enter_ack

// int32 result = 1;
void channel_enter_ack::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 channel_enter_ack::result() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ack.result)
  return result_;
}
void channel_enter_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_ack.result)
}

// uint32 token = 2;
void channel_enter_ack::clear_token() {
  token_ = 0u;
}
::google::protobuf::uint32 channel_enter_ack::token() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ack.token)
  return token_;
}
void channel_enter_ack::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_ack.token)
}

// uint32 channel_id = 3;
void channel_enter_ack::clear_channel_id() {
  channel_id_ = 0u;
}
::google::protobuf::uint32 channel_enter_ack::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ack.channel_id)
  return channel_id_;
}
void channel_enter_ack::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_ack.channel_id)
}

// string channel_name = 4;
void channel_enter_ack::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channel_enter_ack::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ack.channel_name)
  return channel_name_.GetNoArena();
}
void channel_enter_ack::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_enter_ack.channel_name)
}
#if LANG_CXX11
void channel_enter_ack::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_enter_ack.channel_name)
}
#endif
void channel_enter_ack::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_enter_ack.channel_name)
}
void channel_enter_ack::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_enter_ack.channel_name)
}
::std::string* channel_enter_ack::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_enter_ack.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channel_enter_ack::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.channel_enter_ack.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel_enter_ack::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_enter_ack.channel_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channel_leave_req::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channel_leave_req::channel_leave_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.channel_leave_req)
}
channel_leave_req::channel_leave_req(const channel_leave_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:chat.channel_leave_req)
}

void channel_leave_req::SharedCtor() {
  channel_id_ = 0u;
  _cached_size_ = 0;
}

channel_leave_req::~channel_leave_req() {
  // @@protoc_insertion_point(destructor:chat.channel_leave_req)
  SharedDtor();
}

void channel_leave_req::SharedDtor() {
}

void channel_leave_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel_leave_req::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const channel_leave_req& channel_leave_req::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

channel_leave_req* channel_leave_req::New(::google::protobuf::Arena* arena) const {
  channel_leave_req* n = new channel_leave_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channel_leave_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.channel_leave_req)
  channel_id_ = 0u;
}

bool channel_leave_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.channel_leave_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.channel_leave_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.channel_leave_req)
  return false;
#undef DO_
}

void channel_leave_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.channel_leave_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel_id = 1;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.channel_leave_req)
}

::google::protobuf::uint8* channel_leave_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.channel_leave_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel_id = 1;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.channel_leave_req)
  return target;
}

size_t channel_leave_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.channel_leave_req)
  size_t total_size = 0;

  // uint32 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel_leave_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.channel_leave_req)
  GOOGLE_DCHECK_NE(&from, this);
  const channel_leave_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channel_leave_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.channel_leave_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.channel_leave_req)
    MergeFrom(*source);
  }
}

void channel_leave_req::MergeFrom(const channel_leave_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.channel_leave_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void channel_leave_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.channel_leave_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_leave_req::CopyFrom(const channel_leave_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.channel_leave_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_leave_req::IsInitialized() const {
  return true;
}

void channel_leave_req::Swap(channel_leave_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channel_leave_req::InternalSwap(channel_leave_req* other) {
  std::swap(channel_id_, other->channel_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channel_leave_req::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channel_leave_req

// uint32 channel_id = 1;
void channel_leave_req::clear_channel_id() {
  channel_id_ = 0u;
}
::google::protobuf::uint32 channel_leave_req::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_leave_req.channel_id)
  return channel_id_;
}
void channel_leave_req::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_leave_req.channel_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channel_leave_ack::kResultFieldNumber;
const int channel_leave_ack::kChannelIdFieldNumber;
const int channel_leave_ack::kChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channel_leave_ack::channel_leave_ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.channel_leave_ack)
}
channel_leave_ack::channel_leave_ack(const channel_leave_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_name().size() > 0) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&result_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:chat.channel_leave_ack)
}

void channel_leave_ack::SharedCtor() {
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(channel_id_));
  _cached_size_ = 0;
}

channel_leave_ack::~channel_leave_ack() {
  // @@protoc_insertion_point(destructor:chat.channel_leave_ack)
  SharedDtor();
}

void channel_leave_ack::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channel_leave_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel_leave_ack::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const channel_leave_ack& channel_leave_ack::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

channel_leave_ack* channel_leave_ack::New(::google::protobuf::Arena* arena) const {
  channel_leave_ack* n = new channel_leave_ack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channel_leave_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.channel_leave_ack)
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&result_)) + sizeof(channel_id_));
}

bool channel_leave_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.channel_leave_ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.channel_leave_ack.channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.channel_leave_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.channel_leave_ack)
  return false;
#undef DO_
}

void channel_leave_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.channel_leave_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // string channel_name = 3;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_leave_ack.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.channel_leave_ack)
}

::google::protobuf::uint8* channel_leave_ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.channel_leave_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // string channel_name = 3;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_leave_ack.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.channel_leave_ack)
  return target;
}

size_t channel_leave_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.channel_leave_ack)
  size_t total_size = 0;

  // string channel_name = 3;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel_leave_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.channel_leave_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const channel_leave_ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channel_leave_ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.channel_leave_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.channel_leave_ack)
    MergeFrom(*source);
  }
}

void channel_leave_ack::MergeFrom(const channel_leave_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.channel_leave_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void channel_leave_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.channel_leave_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_leave_ack::CopyFrom(const channel_leave_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.channel_leave_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_leave_ack::IsInitialized() const {
  return true;
}

void channel_leave_ack::Swap(channel_leave_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channel_leave_ack::InternalSwap(channel_leave_ack* other) {
  channel_name_.Swap(&other->channel_name_);
  std::swap(result_, other->result_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channel_leave_ack::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channel_leave_ack

// int32 result = 1;
void channel_leave_ack::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 channel_leave_ack::result() const {
  // @@protoc_insertion_point(field_get:chat.channel_leave_ack.result)
  return result_;
}
void channel_leave_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_leave_ack.result)
}

// uint32 channel_id = 2;
void channel_leave_ack::clear_channel_id() {
  channel_id_ = 0u;
}
::google::protobuf::uint32 channel_leave_ack::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_leave_ack.channel_id)
  return channel_id_;
}
void channel_leave_ack::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_leave_ack.channel_id)
}

// string channel_name = 3;
void channel_leave_ack::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channel_leave_ack::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.channel_leave_ack.channel_name)
  return channel_name_.GetNoArena();
}
void channel_leave_ack::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_leave_ack.channel_name)
}
#if LANG_CXX11
void channel_leave_ack::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_leave_ack.channel_name)
}
#endif
void channel_leave_ack::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_leave_ack.channel_name)
}
void channel_leave_ack::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_leave_ack.channel_name)
}
::std::string* channel_leave_ack::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_leave_ack.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channel_leave_ack::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.channel_leave_ack.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel_leave_ack::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_leave_ack.channel_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_chat_req::kTokenFieldNumber;
const int user_chat_req::kChatIdFieldNumber;
const int user_chat_req::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_chat_req::user_chat_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.user_chat_req)
}
user_chat_req::user_chat_req(const user_chat_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&token_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:chat.user_chat_req)
}

void user_chat_req::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&token_)) + sizeof(chat_id_));
  _cached_size_ = 0;
}

user_chat_req::~user_chat_req() {
  // @@protoc_insertion_point(destructor:chat.user_chat_req)
  SharedDtor();
}

void user_chat_req::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void user_chat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_chat_req::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const user_chat_req& user_chat_req::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

user_chat_req* user_chat_req::New(::google::protobuf::Arena* arena) const {
  user_chat_req* n = new user_chat_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_chat_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.user_chat_req)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&token_)) + sizeof(chat_id_));
}

bool user_chat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.user_chat_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.user_chat_req.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.user_chat_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.user_chat_req)
  return false;
#undef DO_
}

void user_chat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.user_chat_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->token(), output);
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chat_id(), output);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_chat_req.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.user_chat_req)
}

::google::protobuf::uint8* user_chat_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.user_chat_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->token(), target);
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chat_id(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_chat_req.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.user_chat_req)
  return target;
}

size_t user_chat_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.user_chat_req)
  size_t total_size = 0;

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // uint32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token());
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chat_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_chat_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.user_chat_req)
  GOOGLE_DCHECK_NE(&from, this);
  const user_chat_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_chat_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.user_chat_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.user_chat_req)
    MergeFrom(*source);
  }
}

void user_chat_req::MergeFrom(const user_chat_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.user_chat_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.token() != 0) {
    set_token(from.token());
  }
  if (from.chat_id() != 0) {
    set_chat_id(from.chat_id());
  }
}

void user_chat_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.user_chat_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_chat_req::CopyFrom(const user_chat_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.user_chat_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_chat_req::IsInitialized() const {
  return true;
}

void user_chat_req::Swap(user_chat_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_chat_req::InternalSwap(user_chat_req* other) {
  text_.Swap(&other->text_);
  std::swap(token_, other->token_);
  std::swap(chat_id_, other->chat_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_chat_req::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_chat_req

// uint32 token = 1;
void user_chat_req::clear_token() {
  token_ = 0u;
}
::google::protobuf::uint32 user_chat_req::token() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_req.token)
  return token_;
}
void user_chat_req::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.user_chat_req.token)
}

// uint32 chat_id = 2;
void user_chat_req::clear_chat_id() {
  chat_id_ = 0u;
}
::google::protobuf::uint32 user_chat_req::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_req.chat_id)
  return chat_id_;
}
void user_chat_req::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_chat_req.chat_id)
}

// string text = 3;
void user_chat_req::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& user_chat_req::text() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_req.text)
  return text_.GetNoArena();
}
void user_chat_req::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_chat_req.text)
}
#if LANG_CXX11
void user_chat_req::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_chat_req.text)
}
#endif
void user_chat_req::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_chat_req.text)
}
void user_chat_req::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_chat_req.text)
}
::std::string* user_chat_req::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_chat_req.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* user_chat_req::release_text() {
  // @@protoc_insertion_point(field_release:chat.user_chat_req.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_chat_req::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.user_chat_req.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int user_chat_ntf::kTokenFieldNumber;
const int user_chat_ntf::kChatIdFieldNumber;
const int user_chat_ntf::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

user_chat_ntf::user_chat_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.user_chat_ntf)
}
user_chat_ntf::user_chat_ntf(const user_chat_ntf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&token_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:chat.user_chat_ntf)
}

void user_chat_ntf::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&token_)) + sizeof(chat_id_));
  _cached_size_ = 0;
}

user_chat_ntf::~user_chat_ntf() {
  // @@protoc_insertion_point(destructor:chat.user_chat_ntf)
  SharedDtor();
}

void user_chat_ntf::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void user_chat_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_chat_ntf::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const user_chat_ntf& user_chat_ntf::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

user_chat_ntf* user_chat_ntf::New(::google::protobuf::Arena* arena) const {
  user_chat_ntf* n = new user_chat_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void user_chat_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.user_chat_ntf)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&token_)) + sizeof(chat_id_));
}

bool user_chat_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.user_chat_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.user_chat_ntf.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.user_chat_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.user_chat_ntf)
  return false;
#undef DO_
}

void user_chat_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.user_chat_ntf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->token(), output);
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chat_id(), output);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_chat_ntf.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.user_chat_ntf)
}

::google::protobuf::uint8* user_chat_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.user_chat_ntf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->token(), target);
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chat_id(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.user_chat_ntf.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.user_chat_ntf)
  return target;
}

size_t user_chat_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.user_chat_ntf)
  size_t total_size = 0;

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // uint32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token());
  }

  // uint32 chat_id = 2;
  if (this->chat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chat_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_chat_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.user_chat_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  const user_chat_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const user_chat_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.user_chat_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.user_chat_ntf)
    MergeFrom(*source);
  }
}

void user_chat_ntf::MergeFrom(const user_chat_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.user_chat_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.token() != 0) {
    set_token(from.token());
  }
  if (from.chat_id() != 0) {
    set_chat_id(from.chat_id());
  }
}

void user_chat_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.user_chat_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_chat_ntf::CopyFrom(const user_chat_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.user_chat_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_chat_ntf::IsInitialized() const {
  return true;
}

void user_chat_ntf::Swap(user_chat_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void user_chat_ntf::InternalSwap(user_chat_ntf* other) {
  text_.Swap(&other->text_);
  std::swap(token_, other->token_);
  std::swap(chat_id_, other->chat_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata user_chat_ntf::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// user_chat_ntf

// uint32 token = 1;
void user_chat_ntf::clear_token() {
  token_ = 0u;
}
::google::protobuf::uint32 user_chat_ntf::token() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_ntf.token)
  return token_;
}
void user_chat_ntf::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.user_chat_ntf.token)
}

// uint32 chat_id = 2;
void user_chat_ntf::clear_chat_id() {
  chat_id_ = 0u;
}
::google::protobuf::uint32 user_chat_ntf::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_ntf.chat_id)
  return chat_id_;
}
void user_chat_ntf::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_chat_ntf.chat_id)
}

// string text = 3;
void user_chat_ntf::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& user_chat_ntf::text() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_ntf.text)
  return text_.GetNoArena();
}
void user_chat_ntf::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_chat_ntf.text)
}
#if LANG_CXX11
void user_chat_ntf::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_chat_ntf.text)
}
#endif
void user_chat_ntf::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_chat_ntf.text)
}
void user_chat_ntf::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_chat_ntf.text)
}
::std::string* user_chat_ntf::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_chat_ntf.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* user_chat_ntf::release_text() {
  // @@protoc_insertion_point(field_release:chat.user_chat_ntf.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void user_chat_ntf::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.user_chat_ntf.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channel_chat_req::kTokenFieldNumber;
const int channel_chat_req::kChannelIdFieldNumber;
const int channel_chat_req::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channel_chat_req::channel_chat_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.channel_chat_req)
}
channel_chat_req::channel_chat_req(const channel_chat_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&token_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:chat.channel_chat_req)
}

void channel_chat_req::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&token_)) + sizeof(channel_id_));
  _cached_size_ = 0;
}

channel_chat_req::~channel_chat_req() {
  // @@protoc_insertion_point(destructor:chat.channel_chat_req)
  SharedDtor();
}

void channel_chat_req::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channel_chat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel_chat_req::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const channel_chat_req& channel_chat_req::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

channel_chat_req* channel_chat_req::New(::google::protobuf::Arena* arena) const {
  channel_chat_req* n = new channel_chat_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channel_chat_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.channel_chat_req)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&token_)) + sizeof(channel_id_));
}

bool channel_chat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.channel_chat_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.channel_chat_req.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.channel_chat_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.channel_chat_req)
  return false;
#undef DO_
}

void channel_chat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.channel_chat_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->token(), output);
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_chat_req.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.channel_chat_req)
}

::google::protobuf::uint8* channel_chat_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.channel_chat_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->token(), target);
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_chat_req.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.channel_chat_req)
  return target;
}

size_t channel_chat_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.channel_chat_req)
  size_t total_size = 0;

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // uint32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token());
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel_chat_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.channel_chat_req)
  GOOGLE_DCHECK_NE(&from, this);
  const channel_chat_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channel_chat_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.channel_chat_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.channel_chat_req)
    MergeFrom(*source);
  }
}

void channel_chat_req::MergeFrom(const channel_chat_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.channel_chat_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.token() != 0) {
    set_token(from.token());
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
}

void channel_chat_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.channel_chat_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_chat_req::CopyFrom(const channel_chat_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.channel_chat_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_chat_req::IsInitialized() const {
  return true;
}

void channel_chat_req::Swap(channel_chat_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channel_chat_req::InternalSwap(channel_chat_req* other) {
  text_.Swap(&other->text_);
  std::swap(token_, other->token_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channel_chat_req::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channel_chat_req

// uint32 token = 1;
void channel_chat_req::clear_token() {
  token_ = 0u;
}
::google::protobuf::uint32 channel_chat_req::token() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_req.token)
  return token_;
}
void channel_chat_req::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_chat_req.token)
}

// uint32 channel_id = 2;
void channel_chat_req::clear_channel_id() {
  channel_id_ = 0u;
}
::google::protobuf::uint32 channel_chat_req::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_req.channel_id)
  return channel_id_;
}
void channel_chat_req::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_chat_req.channel_id)
}

// string text = 3;
void channel_chat_req::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channel_chat_req::text() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_req.text)
  return text_.GetNoArena();
}
void channel_chat_req::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_chat_req.text)
}
#if LANG_CXX11
void channel_chat_req::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_chat_req.text)
}
#endif
void channel_chat_req::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_chat_req.text)
}
void channel_chat_req::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_chat_req.text)
}
::std::string* channel_chat_req::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_chat_req.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channel_chat_req::release_text() {
  // @@protoc_insertion_point(field_release:chat.channel_chat_req.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel_chat_req::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_chat_req.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channel_chat_ntf::kTokenFieldNumber;
const int channel_chat_ntf::kChannelIdFieldNumber;
const int channel_chat_ntf::kChatIdFieldNumber;
const int channel_chat_ntf::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channel_chat_ntf::channel_chat_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.channel_chat_ntf)
}
channel_chat_ntf::channel_chat_ntf(const channel_chat_ntf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&token_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:chat.channel_chat_ntf)
}

void channel_chat_ntf::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&token_)) + sizeof(chat_id_));
  _cached_size_ = 0;
}

channel_chat_ntf::~channel_chat_ntf() {
  // @@protoc_insertion_point(destructor:chat.channel_chat_ntf)
  SharedDtor();
}

void channel_chat_ntf::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channel_chat_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel_chat_ntf::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const channel_chat_ntf& channel_chat_ntf::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

channel_chat_ntf* channel_chat_ntf::New(::google::protobuf::Arena* arena) const {
  channel_chat_ntf* n = new channel_chat_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channel_chat_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.channel_chat_ntf)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_id_) -
      reinterpret_cast<char*>(&token_)) + sizeof(chat_id_));
}

bool channel_chat_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.channel_chat_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chat_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.channel_chat_ntf.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.channel_chat_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.channel_chat_ntf)
  return false;
#undef DO_
}

void channel_chat_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.channel_chat_ntf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token = 1;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->token(), output);
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // uint32 chat_id = 3;
  if (this->chat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chat_id(), output);
  }

  // string text = 4;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_chat_ntf.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.channel_chat_ntf)
}

::google::protobuf::uint8* channel_chat_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.channel_chat_ntf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token = 1;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->token(), target);
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // uint32 chat_id = 3;
  if (this->chat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chat_id(), target);
  }

  // string text = 4;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.channel_chat_ntf.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.channel_chat_ntf)
  return target;
}

size_t channel_chat_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.channel_chat_ntf)
  size_t total_size = 0;

  // string text = 4;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // uint32 token = 1;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token());
  }

  // uint32 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }

  // uint32 chat_id = 3;
  if (this->chat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chat_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel_chat_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.channel_chat_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  const channel_chat_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channel_chat_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.channel_chat_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.channel_chat_ntf)
    MergeFrom(*source);
  }
}

void channel_chat_ntf::MergeFrom(const channel_chat_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.channel_chat_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.token() != 0) {
    set_token(from.token());
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
  if (from.chat_id() != 0) {
    set_chat_id(from.chat_id());
  }
}

void channel_chat_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.channel_chat_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_chat_ntf::CopyFrom(const channel_chat_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.channel_chat_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_chat_ntf::IsInitialized() const {
  return true;
}

void channel_chat_ntf::Swap(channel_chat_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channel_chat_ntf::InternalSwap(channel_chat_ntf* other) {
  text_.Swap(&other->text_);
  std::swap(token_, other->token_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(chat_id_, other->chat_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channel_chat_ntf::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// channel_chat_ntf

// uint32 token = 1;
void channel_chat_ntf::clear_token() {
  token_ = 0u;
}
::google::protobuf::uint32 channel_chat_ntf::token() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_ntf.token)
  return token_;
}
void channel_chat_ntf::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_chat_ntf.token)
}

// uint32 channel_id = 2;
void channel_chat_ntf::clear_channel_id() {
  channel_id_ = 0u;
}
::google::protobuf::uint32 channel_chat_ntf::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_ntf.channel_id)
  return channel_id_;
}
void channel_chat_ntf::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_chat_ntf.channel_id)
}

// uint32 chat_id = 3;
void channel_chat_ntf::clear_chat_id() {
  chat_id_ = 0u;
}
::google::protobuf::uint32 channel_chat_ntf::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_ntf.chat_id)
  return chat_id_;
}
void channel_chat_ntf::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_chat_ntf.chat_id)
}

// string text = 4;
void channel_chat_ntf::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& channel_chat_ntf::text() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_ntf.text)
  return text_.GetNoArena();
}
void channel_chat_ntf::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_chat_ntf.text)
}
#if LANG_CXX11
void channel_chat_ntf::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_chat_ntf.text)
}
#endif
void channel_chat_ntf::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_chat_ntf.text)
}
void channel_chat_ntf::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_chat_ntf.text)
}
::std::string* channel_chat_ntf::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_chat_ntf.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* channel_chat_ntf::release_text() {
  // @@protoc_insertion_point(field_release:chat.channel_chat_ntf.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void channel_chat_ntf::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_chat_ntf.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int system_chat_req::kChannelFieldNumber;
const int system_chat_req::kFlagsFieldNumber;
const int system_chat_req::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

system_chat_req::system_chat_req()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.system_chat_req)
}
system_chat_req::system_chat_req(const system_chat_req& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:chat.system_chat_req)
}

void system_chat_req::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(flags_));
  _cached_size_ = 0;
}

system_chat_req::~system_chat_req() {
  // @@protoc_insertion_point(destructor:chat.system_chat_req)
  SharedDtor();
}

void system_chat_req::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void system_chat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_chat_req::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const system_chat_req& system_chat_req::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

system_chat_req* system_chat_req::New(::google::protobuf::Arena* arena) const {
  system_chat_req* n = new system_chat_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void system_chat_req::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.system_chat_req)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(flags_));
}

bool system_chat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.system_chat_req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.system_chat_req.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.system_chat_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.system_chat_req)
  return false;
#undef DO_
}

void system_chat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.system_chat_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.system_chat_req.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.system_chat_req)
}

::google::protobuf::uint8* system_chat_req::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.system_chat_req)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel = 1;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.system_chat_req.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.system_chat_req)
  return target;
}

size_t system_chat_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.system_chat_req)
  size_t total_size = 0;

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // uint32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_chat_req::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.system_chat_req)
  GOOGLE_DCHECK_NE(&from, this);
  const system_chat_req* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const system_chat_req>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.system_chat_req)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.system_chat_req)
    MergeFrom(*source);
  }
}

void system_chat_req::MergeFrom(const system_chat_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.system_chat_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void system_chat_req::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.system_chat_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_chat_req::CopyFrom(const system_chat_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.system_chat_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_chat_req::IsInitialized() const {
  return true;
}

void system_chat_req::Swap(system_chat_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void system_chat_req::InternalSwap(system_chat_req* other) {
  text_.Swap(&other->text_);
  std::swap(channel_, other->channel_);
  std::swap(flags_, other->flags_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata system_chat_req::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// system_chat_req

// uint32 channel = 1;
void system_chat_req::clear_channel() {
  channel_ = 0u;
}
::google::protobuf::uint32 system_chat_req::channel() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_req.channel)
  return channel_;
}
void system_chat_req::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:chat.system_chat_req.channel)
}

// uint32 flags = 2;
void system_chat_req::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 system_chat_req::flags() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_req.flags)
  return flags_;
}
void system_chat_req::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:chat.system_chat_req.flags)
}

// string text = 3;
void system_chat_req::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& system_chat_req::text() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_req.text)
  return text_.GetNoArena();
}
void system_chat_req::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.system_chat_req.text)
}
#if LANG_CXX11
void system_chat_req::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.system_chat_req.text)
}
#endif
void system_chat_req::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.system_chat_req.text)
}
void system_chat_req::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.system_chat_req.text)
}
::std::string* system_chat_req::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.system_chat_req.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* system_chat_req::release_text() {
  // @@protoc_insertion_point(field_release:chat.system_chat_req.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void system_chat_req::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.system_chat_req.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int system_chat_ntf::kChannelIdFieldNumber;
const int system_chat_ntf::kFlagsFieldNumber;
const int system_chat_ntf::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

system_chat_ntf::system_chat_ntf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.system_chat_ntf)
}
system_chat_ntf::system_chat_ntf(const system_chat_ntf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:chat.system_chat_ntf)
}

void system_chat_ntf::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(flags_));
  _cached_size_ = 0;
}

system_chat_ntf::~system_chat_ntf() {
  // @@protoc_insertion_point(destructor:chat.system_chat_ntf)
  SharedDtor();
}

void system_chat_ntf::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void system_chat_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_chat_ntf::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const system_chat_ntf& system_chat_ntf::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

system_chat_ntf* system_chat_ntf::New(::google::protobuf::Arena* arena) const {
  system_chat_ntf* n = new system_chat_ntf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void system_chat_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.system_chat_ntf)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(flags_));
}

bool system_chat_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.system_chat_ntf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.system_chat_ntf.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.system_chat_ntf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.system_chat_ntf)
  return false;
#undef DO_
}

void system_chat_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.system_chat_ntf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel_id = 1;
  if (this->channel_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.system_chat_ntf.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.system_chat_ntf)
}

::google::protobuf::uint8* system_chat_ntf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.system_chat_ntf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel_id = 1;
  if (this->channel_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.system_chat_ntf.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.system_chat_ntf)
  return target;
}

size_t system_chat_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.system_chat_ntf)
  size_t total_size = 0;

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // uint32 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_id());
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_chat_ntf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.system_chat_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  const system_chat_ntf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const system_chat_ntf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.system_chat_ntf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.system_chat_ntf)
    MergeFrom(*source);
  }
}

void system_chat_ntf::MergeFrom(const system_chat_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.system_chat_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.channel_id() != 0) {
    set_channel_id(from.channel_id());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void system_chat_ntf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.system_chat_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_chat_ntf::CopyFrom(const system_chat_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.system_chat_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_chat_ntf::IsInitialized() const {
  return true;
}

void system_chat_ntf::Swap(system_chat_ntf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void system_chat_ntf::InternalSwap(system_chat_ntf* other) {
  text_.Swap(&other->text_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(flags_, other->flags_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata system_chat_ntf::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// system_chat_ntf

// uint32 channel_id = 1;
void system_chat_ntf::clear_channel_id() {
  channel_id_ = 0u;
}
::google::protobuf::uint32 system_chat_ntf::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_ntf.channel_id)
  return channel_id_;
}
void system_chat_ntf::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.system_chat_ntf.channel_id)
}

// uint32 flags = 2;
void system_chat_ntf::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 system_chat_ntf::flags() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_ntf.flags)
  return flags_;
}
void system_chat_ntf::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:chat.system_chat_ntf.flags)
}

// string text = 3;
void system_chat_ntf::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& system_chat_ntf::text() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_ntf.text)
  return text_.GetNoArena();
}
void system_chat_ntf::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.system_chat_ntf.text)
}
#if LANG_CXX11
void system_chat_ntf::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.system_chat_ntf.text)
}
#endif
void system_chat_ntf::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.system_chat_ntf.text)
}
void system_chat_ntf::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.system_chat_ntf.text)
}
::std::string* system_chat_ntf::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.system_chat_ntf.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* system_chat_ntf::release_text() {
  // @@protoc_insertion_point(field_release:chat.system_chat_ntf.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void system_chat_ntf::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.system_chat_ntf.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int chat_err::kResultFieldNumber;
const int chat_err::kTokenFieldNumber;
const int chat_err::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

chat_err::chat_err()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.chat_err)
}
chat_err::chat_err(const chat_err& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&result_)) + sizeof(token_));
  // @@protoc_insertion_point(copy_constructor:chat.chat_err)
}

void chat_err::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&result_)) + sizeof(token_));
  _cached_size_ = 0;
}

chat_err::~chat_err() {
  // @@protoc_insertion_point(destructor:chat.chat_err)
  SharedDtor();
}

void chat_err::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void chat_err::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chat_err::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const chat_err& chat_err::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

chat_err* chat_err::New(::google::protobuf::Arena* arena) const {
  chat_err* n = new chat_err;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void chat_err::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.chat_err)
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&result_)) + sizeof(token_));
}

bool chat_err::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.chat_err)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.chat_err.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.chat_err)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.chat_err)
  return false;
#undef DO_
}

void chat_err::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.chat_err)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // uint32 token = 2;
  if (this->token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->token(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.chat_err.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.chat_err)
}

::google::protobuf::uint8* chat_err::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.chat_err)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // uint32 token = 2;
  if (this->token() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->token(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.chat_err.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.chat_err)
  return target;
}

size_t chat_err::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.chat_err)
  size_t total_size = 0;

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // uint32 token = 2;
  if (this->token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chat_err::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.chat_err)
  GOOGLE_DCHECK_NE(&from, this);
  const chat_err* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const chat_err>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.chat_err)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.chat_err)
    MergeFrom(*source);
  }
}

void chat_err::MergeFrom(const chat_err& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.chat_err)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.token() != 0) {
    set_token(from.token());
  }
}

void chat_err::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.chat_err)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chat_err::CopyFrom(const chat_err& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.chat_err)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chat_err::IsInitialized() const {
  return true;
}

void chat_err::Swap(chat_err* other) {
  if (other == this) return;
  InternalSwap(other);
}
void chat_err::InternalSwap(chat_err* other) {
  description_.Swap(&other->description_);
  std::swap(result_, other->result_);
  std::swap(token_, other->token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata chat_err::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// chat_err

// int32 result = 1;
void chat_err::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 chat_err::result() const {
  // @@protoc_insertion_point(field_get:chat.chat_err.result)
  return result_;
}
void chat_err::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.chat_err.result)
}

// uint32 token = 2;
void chat_err::clear_token() {
  token_ = 0u;
}
::google::protobuf::uint32 chat_err::token() const {
  // @@protoc_insertion_point(field_get:chat.chat_err.token)
  return token_;
}
void chat_err::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.chat_err.token)
}

// string description = 3;
void chat_err::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& chat_err::description() const {
  // @@protoc_insertion_point(field_get:chat.chat_err.description)
  return description_.GetNoArena();
}
void chat_err::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.chat_err.description)
}
#if LANG_CXX11
void chat_err::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.chat_err.description)
}
#endif
void chat_err::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.chat_err.description)
}
void chat_err::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.chat_err.description)
}
::std::string* chat_err::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:chat.chat_err.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* chat_err::release_description() {
  // @@protoc_insertion_point(field_release:chat.chat_err.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void chat_err::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:chat.chat_err.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)
