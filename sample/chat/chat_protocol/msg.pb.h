// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_msg_2eproto__INCLUDED
#define PROTOBUF_msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace chat {
class channel_chat_ntf;
class channel_chat_ntfDefaultTypeInternal;
extern channel_chat_ntfDefaultTypeInternal _channel_chat_ntf_default_instance_;
class channel_chat_req;
class channel_chat_reqDefaultTypeInternal;
extern channel_chat_reqDefaultTypeInternal _channel_chat_req_default_instance_;
class channel_enter_ack;
class channel_enter_ackDefaultTypeInternal;
extern channel_enter_ackDefaultTypeInternal _channel_enter_ack_default_instance_;
class channel_enter_ntf;
class channel_enter_ntfDefaultTypeInternal;
extern channel_enter_ntfDefaultTypeInternal _channel_enter_ntf_default_instance_;
class channel_enter_req;
class channel_enter_reqDefaultTypeInternal;
extern channel_enter_reqDefaultTypeInternal _channel_enter_req_default_instance_;
class channel_leave_ack;
class channel_leave_ackDefaultTypeInternal;
extern channel_leave_ackDefaultTypeInternal _channel_leave_ack_default_instance_;
class channel_leave_req;
class channel_leave_reqDefaultTypeInternal;
extern channel_leave_reqDefaultTypeInternal _channel_leave_req_default_instance_;
class chat_err;
class chat_errDefaultTypeInternal;
extern chat_errDefaultTypeInternal _chat_err_default_instance_;
class create_channel_ack;
class create_channel_ackDefaultTypeInternal;
extern create_channel_ackDefaultTypeInternal _create_channel_ack_default_instance_;
class create_channel_req;
class create_channel_reqDefaultTypeInternal;
extern create_channel_reqDefaultTypeInternal _create_channel_req_default_instance_;
class login_ack;
class login_ackDefaultTypeInternal;
extern login_ackDefaultTypeInternal _login_ack_default_instance_;
class login_req;
class login_reqDefaultTypeInternal;
extern login_reqDefaultTypeInternal _login_req_default_instance_;
class logout_req;
class logout_reqDefaultTypeInternal;
extern logout_reqDefaultTypeInternal _logout_req_default_instance_;
class system_chat_ntf;
class system_chat_ntfDefaultTypeInternal;
extern system_chat_ntfDefaultTypeInternal _system_chat_ntf_default_instance_;
class system_chat_req;
class system_chat_reqDefaultTypeInternal;
extern system_chat_reqDefaultTypeInternal _system_chat_req_default_instance_;
class user_auth_ack;
class user_auth_ackDefaultTypeInternal;
extern user_auth_ackDefaultTypeInternal _user_auth_ack_default_instance_;
class user_auth_req;
class user_auth_reqDefaultTypeInternal;
extern user_auth_reqDefaultTypeInternal _user_auth_req_default_instance_;
class user_chat_ntf;
class user_chat_ntfDefaultTypeInternal;
extern user_chat_ntfDefaultTypeInternal _user_chat_ntf_default_instance_;
class user_chat_req;
class user_chat_reqDefaultTypeInternal;
extern user_chat_reqDefaultTypeInternal _user_chat_req_default_instance_;
class user_info_ack;
class user_info_ackDefaultTypeInternal;
extern user_info_ackDefaultTypeInternal _user_info_ack_default_instance_;
class user_info_req;
class user_info_reqDefaultTypeInternal;
extern user_info_reqDefaultTypeInternal _user_info_req_default_instance_;
}  // namespace chat

namespace chat {

namespace protobuf_msg_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_msg_2eproto

enum channel_enter_req_enter_type {
  channel_enter_req_enter_type_WILDCARD = 0,
  channel_enter_req_enter_type_CHANNEL_NAME = 1,
  channel_enter_req_enter_type_CHANNEL_ID = 2,
  channel_enter_req_enter_type_channel_enter_req_enter_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  channel_enter_req_enter_type_channel_enter_req_enter_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool channel_enter_req_enter_type_IsValid(int value);
const channel_enter_req_enter_type channel_enter_req_enter_type_enter_type_MIN = channel_enter_req_enter_type_WILDCARD;
const channel_enter_req_enter_type channel_enter_req_enter_type_enter_type_MAX = channel_enter_req_enter_type_CHANNEL_ID;
const int channel_enter_req_enter_type_enter_type_ARRAYSIZE = channel_enter_req_enter_type_enter_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* channel_enter_req_enter_type_descriptor();
inline const ::std::string& channel_enter_req_enter_type_Name(channel_enter_req_enter_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    channel_enter_req_enter_type_descriptor(), value);
}
inline bool channel_enter_req_enter_type_Parse(
    const ::std::string& name, channel_enter_req_enter_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<channel_enter_req_enter_type>(
    channel_enter_req_enter_type_descriptor(), name, value);
}
enum MSG_ID {
  MSG_BEGIN = 0,
  MSG_USERAUTH_REQ = 257,
  MSG_USERAUTH_ACK = 258,
  MSG_CHANNEL_ENTER_NTF = 260,
  MSG_USERINFO_REQ = 4097,
  MSG_USERINFO_ACK = 4098,
  MSG_CHANNEL_ENTER_REQ = 4099,
  MSG_CHANNEL_ENTER_ACK = 4100,
  MSG_CHANNEL_LEAVE_REQ = 4101,
  MSG_CHANNEL_LEAVE_ACK = 4102,
  MSG_USER_CHAT_REQ = 4103,
  MSG_USER_CHAT_NTF = 4104,
  MSG_CHANNEL_CHAT_REQ = 4105,
  MSG_CHANNEL_CHAT_NTF = 4106,
  MSG_CHAT_ERR = 4108,
  MSG_SYS_CHAT_NTF = 4110,
  MSG_LOGIN_REQ = 1,
  MSG_LOGIN_ACK = 2,
  MSG_LOGOUT_REQ = 3,
  MSG_LOGOUT_ACK = 4,
  MSG_CREATE_CHANNEL_REQ = 5,
  MSG_CREATE_CHANNEL_ACK = 6,
  MSG_SYS_CHAT_REQ = 7,
  MSG_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MSG_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MSG_ID_IsValid(int value);
const MSG_ID MSG_ID_MIN = MSG_BEGIN;
const MSG_ID MSG_ID_MAX = MSG_SYS_CHAT_NTF;
const int MSG_ID_ARRAYSIZE = MSG_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSG_ID_descriptor();
inline const ::std::string& MSG_ID_Name(MSG_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSG_ID_descriptor(), value);
}
inline bool MSG_ID_Parse(
    const ::std::string& name, MSG_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSG_ID>(
    MSG_ID_descriptor(), name, value);
}
enum CHAT_T {
  USR = 0,
  USR_P2P = 1,
  SYS_NOTE = 2,
  SYS_IMPORTANT = 3,
  SYS_SCREEN = 4,
  CHAT_T_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CHAT_T_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CHAT_T_IsValid(int value);
const CHAT_T CHAT_T_MIN = USR;
const CHAT_T CHAT_T_MAX = SYS_SCREEN;
const int CHAT_T_ARRAYSIZE = CHAT_T_MAX + 1;

const ::google::protobuf::EnumDescriptor* CHAT_T_descriptor();
inline const ::std::string& CHAT_T_Name(CHAT_T value) {
  return ::google::protobuf::internal::NameOfEnum(
    CHAT_T_descriptor(), value);
}
inline bool CHAT_T_Parse(
    const ::std::string& name, CHAT_T* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CHAT_T>(
    CHAT_T_descriptor(), name, value);
}
// ===================================================================

class login_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.login_req) */ {
 public:
  login_req();
  virtual ~login_req();

  login_req(const login_req& from);

  inline login_req& operator=(const login_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_req& default_instance();

  static inline const login_req* internal_default_instance() {
    return reinterpret_cast<const login_req*>(
               &_login_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(login_req* other);

  // implements Message ----------------------------------------------

  inline login_req* New() const PROTOBUF_FINAL { return New(NULL); }

  login_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const login_req& from);
  void MergeFrom(const login_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(login_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nick = 2;
  void clear_nick();
  static const int kNickFieldNumber = 2;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string server = 3;
  void clear_server();
  static const int kServerFieldNumber = 3;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // string channel_wild = 4;
  void clear_channel_wild();
  static const int kChannelWildFieldNumber = 4;
  const ::std::string& channel_wild() const;
  void set_channel_wild(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_wild(::std::string&& value);
  #endif
  void set_channel_wild(const char* value);
  void set_channel_wild(const char* value, size_t size);
  ::std::string* mutable_channel_wild();
  ::std::string* release_channel_wild();
  void set_allocated_channel_wild(::std::string* channel_wild);

  // string extra = 5;
  void clear_extra();
  static const int kExtraFieldNumber = 5;
  const ::std::string& extra() const;
  void set_extra(const ::std::string& value);
  #if LANG_CXX11
  void set_extra(::std::string&& value);
  #endif
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  ::std::string* mutable_extra();
  ::std::string* release_extra();
  void set_allocated_extra(::std::string* extra);

  // uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat.login_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  ::google::protobuf::internal::ArenaStringPtr channel_wild_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class login_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.login_ack) */ {
 public:
  login_ack();
  virtual ~login_ack();

  login_ack(const login_ack& from);

  inline login_ack& operator=(const login_ack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_ack& default_instance();

  static inline const login_ack* internal_default_instance() {
    return reinterpret_cast<const login_ack*>(
               &_login_ack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(login_ack* other);

  // implements Message ----------------------------------------------

  inline login_ack* New() const PROTOBUF_FINAL { return New(NULL); }

  login_ack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const login_ack& from);
  void MergeFrom(const login_ack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(login_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 4;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // uint32 chat_id = 2;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 2;
  ::google::protobuf::uint32 chat_id() const;
  void set_chat_id(::google::protobuf::uint32 value);

  // uint64 user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat.login_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 chat_id_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class logout_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.logout_req) */ {
 public:
  logout_req();
  virtual ~logout_req();

  logout_req(const logout_req& from);

  inline logout_req& operator=(const logout_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const logout_req& default_instance();

  static inline const logout_req* internal_default_instance() {
    return reinterpret_cast<const logout_req*>(
               &_logout_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(logout_req* other);

  // implements Message ----------------------------------------------

  inline logout_req* New() const PROTOBUF_FINAL { return New(NULL); }

  logout_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const logout_req& from);
  void MergeFrom(const logout_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(logout_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat.logout_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class user_auth_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.user_auth_req) */ {
 public:
  user_auth_req();
  virtual ~user_auth_req();

  user_auth_req(const user_auth_req& from);

  inline user_auth_req& operator=(const user_auth_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_auth_req& default_instance();

  static inline const user_auth_req* internal_default_instance() {
    return reinterpret_cast<const user_auth_req*>(
               &_user_auth_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(user_auth_req* other);

  // implements Message ----------------------------------------------

  inline user_auth_req* New() const PROTOBUF_FINAL { return New(NULL); }

  user_auth_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user_auth_req& from);
  void MergeFrom(const user_auth_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user_auth_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat.user_auth_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class user_auth_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.user_auth_ack) */ {
 public:
  user_auth_ack();
  virtual ~user_auth_ack();

  user_auth_ack(const user_auth_ack& from);

  inline user_auth_ack& operator=(const user_auth_ack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_auth_ack& default_instance();

  static inline const user_auth_ack* internal_default_instance() {
    return reinterpret_cast<const user_auth_ack*>(
               &_user_auth_ack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(user_auth_ack* other);

  // implements Message ----------------------------------------------

  inline user_auth_ack* New() const PROTOBUF_FINAL { return New(NULL); }

  user_auth_ack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user_auth_ack& from);
  void MergeFrom(const user_auth_ack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user_auth_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nick = 4;
  void clear_nick();
  static const int kNickFieldNumber = 4;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string extra = 5;
  void clear_extra();
  static const int kExtraFieldNumber = 5;
  const ::std::string& extra() const;
  void set_extra(const ::std::string& value);
  #if LANG_CXX11
  void set_extra(::std::string&& value);
  #endif
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  ::std::string* mutable_extra();
  ::std::string* release_extra();
  void set_allocated_extra(::std::string* extra);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // uint32 chat_id = 2;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 2;
  ::google::protobuf::uint32 chat_id() const;
  void set_chat_id(::google::protobuf::uint32 value);

  // uint64 user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat.user_auth_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 chat_id_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class user_info_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.user_info_req) */ {
 public:
  user_info_req();
  virtual ~user_info_req();

  user_info_req(const user_info_req& from);

  inline user_info_req& operator=(const user_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_info_req& default_instance();

  static inline const user_info_req* internal_default_instance() {
    return reinterpret_cast<const user_info_req*>(
               &_user_info_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(user_info_req* other);

  // implements Message ----------------------------------------------

  inline user_info_req* New() const PROTOBUF_FINAL { return New(NULL); }

  user_info_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user_info_req& from);
  void MergeFrom(const user_info_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user_info_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat.user_info_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class user_info_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.user_info_ack) */ {
 public:
  user_info_ack();
  virtual ~user_info_ack();

  user_info_ack(const user_info_ack& from);

  inline user_info_ack& operator=(const user_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_info_ack& default_instance();

  static inline const user_info_ack* internal_default_instance() {
    return reinterpret_cast<const user_info_ack*>(
               &_user_info_ack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(user_info_ack* other);

  // implements Message ----------------------------------------------

  inline user_info_ack* New() const PROTOBUF_FINAL { return New(NULL); }

  user_info_ack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user_info_ack& from);
  void MergeFrom(const user_info_ack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user_info_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nick = 4;
  void clear_nick();
  static const int kNickFieldNumber = 4;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string extra = 5;
  void clear_extra();
  static const int kExtraFieldNumber = 5;
  const ::std::string& extra() const;
  void set_extra(const ::std::string& value);
  #if LANG_CXX11
  void set_extra(::std::string&& value);
  #endif
  void set_extra(const char* value);
  void set_extra(const char* value, size_t size);
  ::std::string* mutable_extra();
  ::std::string* release_extra();
  void set_allocated_extra(::std::string* extra);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // uint32 chat_id = 2;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 2;
  ::google::protobuf::uint32 chat_id() const;
  void set_chat_id(::google::protobuf::uint32 value);

  // uint64 user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chat.user_info_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr extra_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 chat_id_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class create_channel_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.create_channel_req) */ {
 public:
  create_channel_req();
  virtual ~create_channel_req();

  create_channel_req(const create_channel_req& from);

  inline create_channel_req& operator=(const create_channel_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_channel_req& default_instance();

  static inline const create_channel_req* internal_default_instance() {
    return reinterpret_cast<const create_channel_req*>(
               &_create_channel_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(create_channel_req* other);

  // implements Message ----------------------------------------------

  inline create_channel_req* New() const PROTOBUF_FINAL { return New(NULL); }

  create_channel_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const create_channel_req& from);
  void MergeFrom(const create_channel_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(create_channel_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_name = 1;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // @@protoc_insertion_point(class_scope:chat.create_channel_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class create_channel_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.create_channel_ack) */ {
 public:
  create_channel_ack();
  virtual ~create_channel_ack();

  create_channel_ack(const create_channel_ack& from);

  inline create_channel_ack& operator=(const create_channel_ack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_channel_ack& default_instance();

  static inline const create_channel_ack* internal_default_instance() {
    return reinterpret_cast<const create_channel_ack*>(
               &_create_channel_ack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(create_channel_ack* other);

  // implements Message ----------------------------------------------

  inline create_channel_ack* New() const PROTOBUF_FINAL { return New(NULL); }

  create_channel_ack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const create_channel_ack& from);
  void MergeFrom(const create_channel_ack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(create_channel_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_name = 1;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 1;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // uint32 channel_id = 2;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.create_channel_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::uint32 channel_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class channel_enter_ntf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.channel_enter_ntf) */ {
 public:
  channel_enter_ntf();
  virtual ~channel_enter_ntf();

  channel_enter_ntf(const channel_enter_ntf& from);

  inline channel_enter_ntf& operator=(const channel_enter_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channel_enter_ntf& default_instance();

  static inline const channel_enter_ntf* internal_default_instance() {
    return reinterpret_cast<const channel_enter_ntf*>(
               &_channel_enter_ntf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(channel_enter_ntf* other);

  // implements Message ----------------------------------------------

  inline channel_enter_ntf* New() const PROTOBUF_FINAL { return New(NULL); }

  channel_enter_ntf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channel_enter_ntf& from);
  void MergeFrom(const channel_enter_ntf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channel_enter_ntf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_name = 2;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 2;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // uint32 channel_id = 1;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.channel_enter_ntf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::uint32 channel_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class channel_enter_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.channel_enter_req) */ {
 public:
  channel_enter_req();
  virtual ~channel_enter_req();

  channel_enter_req(const channel_enter_req& from);

  inline channel_enter_req& operator=(const channel_enter_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channel_enter_req& default_instance();

  static inline const channel_enter_req* internal_default_instance() {
    return reinterpret_cast<const channel_enter_req*>(
               &_channel_enter_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(channel_enter_req* other);

  // implements Message ----------------------------------------------

  inline channel_enter_req* New() const PROTOBUF_FINAL { return New(NULL); }

  channel_enter_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channel_enter_req& from);
  void MergeFrom(const channel_enter_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channel_enter_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef channel_enter_req_enter_type enter_type;
  static const enter_type WILDCARD =
    channel_enter_req_enter_type_WILDCARD;
  static const enter_type CHANNEL_NAME =
    channel_enter_req_enter_type_CHANNEL_NAME;
  static const enter_type CHANNEL_ID =
    channel_enter_req_enter_type_CHANNEL_ID;
  static inline bool enter_type_IsValid(int value) {
    return channel_enter_req_enter_type_IsValid(value);
  }
  static const enter_type enter_type_MIN =
    channel_enter_req_enter_type_enter_type_MIN;
  static const enter_type enter_type_MAX =
    channel_enter_req_enter_type_enter_type_MAX;
  static const int enter_type_ARRAYSIZE =
    channel_enter_req_enter_type_enter_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enter_type_descriptor() {
    return channel_enter_req_enter_type_descriptor();
  }
  static inline const ::std::string& enter_type_Name(enter_type value) {
    return channel_enter_req_enter_type_Name(value);
  }
  static inline bool enter_type_Parse(const ::std::string& name,
      enter_type* value) {
    return channel_enter_req_enter_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string channel_name = 4;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 4;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // string channel_pass = 5;
  void clear_channel_pass();
  static const int kChannelPassFieldNumber = 5;
  const ::std::string& channel_pass() const;
  void set_channel_pass(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_pass(::std::string&& value);
  #endif
  void set_channel_pass(const char* value);
  void set_channel_pass(const char* value, size_t size);
  ::std::string* mutable_channel_pass();
  ::std::string* release_channel_pass();
  void set_allocated_channel_pass(::std::string* channel_pass);

  // uint32 token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  ::google::protobuf::uint32 token() const;
  void set_token(::google::protobuf::uint32 value);

  // .chat.channel_enter_req.enter_type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::chat::channel_enter_req_enter_type type() const;
  void set_type(::chat::channel_enter_req_enter_type value);

  // uint32 channel_id = 3;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.channel_enter_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::internal::ArenaStringPtr channel_pass_;
  ::google::protobuf::uint32 token_;
  int type_;
  ::google::protobuf::uint32 channel_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class channel_enter_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.channel_enter_ack) */ {
 public:
  channel_enter_ack();
  virtual ~channel_enter_ack();

  channel_enter_ack(const channel_enter_ack& from);

  inline channel_enter_ack& operator=(const channel_enter_ack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channel_enter_ack& default_instance();

  static inline const channel_enter_ack* internal_default_instance() {
    return reinterpret_cast<const channel_enter_ack*>(
               &_channel_enter_ack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(channel_enter_ack* other);

  // implements Message ----------------------------------------------

  inline channel_enter_ack* New() const PROTOBUF_FINAL { return New(NULL); }

  channel_enter_ack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channel_enter_ack& from);
  void MergeFrom(const channel_enter_ack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channel_enter_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_name = 4;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 4;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // uint32 token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  ::google::protobuf::uint32 token() const;
  void set_token(::google::protobuf::uint32 value);

  // uint32 channel_id = 3;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.channel_enter_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 token_;
  ::google::protobuf::uint32 channel_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class channel_leave_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.channel_leave_req) */ {
 public:
  channel_leave_req();
  virtual ~channel_leave_req();

  channel_leave_req(const channel_leave_req& from);

  inline channel_leave_req& operator=(const channel_leave_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channel_leave_req& default_instance();

  static inline const channel_leave_req* internal_default_instance() {
    return reinterpret_cast<const channel_leave_req*>(
               &_channel_leave_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(channel_leave_req* other);

  // implements Message ----------------------------------------------

  inline channel_leave_req* New() const PROTOBUF_FINAL { return New(NULL); }

  channel_leave_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channel_leave_req& from);
  void MergeFrom(const channel_leave_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channel_leave_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 channel_id = 1;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.channel_leave_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 channel_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class channel_leave_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.channel_leave_ack) */ {
 public:
  channel_leave_ack();
  virtual ~channel_leave_ack();

  channel_leave_ack(const channel_leave_ack& from);

  inline channel_leave_ack& operator=(const channel_leave_ack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channel_leave_ack& default_instance();

  static inline const channel_leave_ack* internal_default_instance() {
    return reinterpret_cast<const channel_leave_ack*>(
               &_channel_leave_ack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(channel_leave_ack* other);

  // implements Message ----------------------------------------------

  inline channel_leave_ack* New() const PROTOBUF_FINAL { return New(NULL); }

  channel_leave_ack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channel_leave_ack& from);
  void MergeFrom(const channel_leave_ack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channel_leave_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_name = 3;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 3;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // uint32 channel_id = 2;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.channel_leave_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 channel_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class user_chat_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.user_chat_req) */ {
 public:
  user_chat_req();
  virtual ~user_chat_req();

  user_chat_req(const user_chat_req& from);

  inline user_chat_req& operator=(const user_chat_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_chat_req& default_instance();

  static inline const user_chat_req* internal_default_instance() {
    return reinterpret_cast<const user_chat_req*>(
               &_user_chat_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(user_chat_req* other);

  // implements Message ----------------------------------------------

  inline user_chat_req* New() const PROTOBUF_FINAL { return New(NULL); }

  user_chat_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user_chat_req& from);
  void MergeFrom(const user_chat_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user_chat_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint32 token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  ::google::protobuf::uint32 token() const;
  void set_token(::google::protobuf::uint32 value);

  // uint32 chat_id = 2;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 2;
  ::google::protobuf::uint32 chat_id() const;
  void set_chat_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.user_chat_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 token_;
  ::google::protobuf::uint32 chat_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class user_chat_ntf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.user_chat_ntf) */ {
 public:
  user_chat_ntf();
  virtual ~user_chat_ntf();

  user_chat_ntf(const user_chat_ntf& from);

  inline user_chat_ntf& operator=(const user_chat_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_chat_ntf& default_instance();

  static inline const user_chat_ntf* internal_default_instance() {
    return reinterpret_cast<const user_chat_ntf*>(
               &_user_chat_ntf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(user_chat_ntf* other);

  // implements Message ----------------------------------------------

  inline user_chat_ntf* New() const PROTOBUF_FINAL { return New(NULL); }

  user_chat_ntf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user_chat_ntf& from);
  void MergeFrom(const user_chat_ntf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user_chat_ntf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint32 token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  ::google::protobuf::uint32 token() const;
  void set_token(::google::protobuf::uint32 value);

  // uint32 chat_id = 2;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 2;
  ::google::protobuf::uint32 chat_id() const;
  void set_chat_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.user_chat_ntf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 token_;
  ::google::protobuf::uint32 chat_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class channel_chat_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.channel_chat_req) */ {
 public:
  channel_chat_req();
  virtual ~channel_chat_req();

  channel_chat_req(const channel_chat_req& from);

  inline channel_chat_req& operator=(const channel_chat_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channel_chat_req& default_instance();

  static inline const channel_chat_req* internal_default_instance() {
    return reinterpret_cast<const channel_chat_req*>(
               &_channel_chat_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(channel_chat_req* other);

  // implements Message ----------------------------------------------

  inline channel_chat_req* New() const PROTOBUF_FINAL { return New(NULL); }

  channel_chat_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channel_chat_req& from);
  void MergeFrom(const channel_chat_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channel_chat_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint32 token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  ::google::protobuf::uint32 token() const;
  void set_token(::google::protobuf::uint32 value);

  // uint32 channel_id = 2;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.channel_chat_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 token_;
  ::google::protobuf::uint32 channel_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class channel_chat_ntf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.channel_chat_ntf) */ {
 public:
  channel_chat_ntf();
  virtual ~channel_chat_ntf();

  channel_chat_ntf(const channel_chat_ntf& from);

  inline channel_chat_ntf& operator=(const channel_chat_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const channel_chat_ntf& default_instance();

  static inline const channel_chat_ntf* internal_default_instance() {
    return reinterpret_cast<const channel_chat_ntf*>(
               &_channel_chat_ntf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(channel_chat_ntf* other);

  // implements Message ----------------------------------------------

  inline channel_chat_ntf* New() const PROTOBUF_FINAL { return New(NULL); }

  channel_chat_ntf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channel_chat_ntf& from);
  void MergeFrom(const channel_chat_ntf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channel_chat_ntf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 4;
  void clear_text();
  static const int kTextFieldNumber = 4;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint32 token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  ::google::protobuf::uint32 token() const;
  void set_token(::google::protobuf::uint32 value);

  // uint32 channel_id = 2;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // uint32 chat_id = 3;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 3;
  ::google::protobuf::uint32 chat_id() const;
  void set_chat_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.channel_chat_ntf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 token_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 chat_id_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class system_chat_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.system_chat_req) */ {
 public:
  system_chat_req();
  virtual ~system_chat_req();

  system_chat_req(const system_chat_req& from);

  inline system_chat_req& operator=(const system_chat_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const system_chat_req& default_instance();

  static inline const system_chat_req* internal_default_instance() {
    return reinterpret_cast<const system_chat_req*>(
               &_system_chat_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(system_chat_req* other);

  // implements Message ----------------------------------------------

  inline system_chat_req* New() const PROTOBUF_FINAL { return New(NULL); }

  system_chat_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const system_chat_req& from);
  void MergeFrom(const system_chat_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(system_chat_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint32 channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.system_chat_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class system_chat_ntf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.system_chat_ntf) */ {
 public:
  system_chat_ntf();
  virtual ~system_chat_ntf();

  system_chat_ntf(const system_chat_ntf& from);

  inline system_chat_ntf& operator=(const system_chat_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const system_chat_ntf& default_instance();

  static inline const system_chat_ntf* internal_default_instance() {
    return reinterpret_cast<const system_chat_ntf*>(
               &_system_chat_ntf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(system_chat_ntf* other);

  // implements Message ----------------------------------------------

  inline system_chat_ntf* New() const PROTOBUF_FINAL { return New(NULL); }

  system_chat_ntf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const system_chat_ntf& from);
  void MergeFrom(const system_chat_ntf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(system_chat_ntf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // uint32 channel_id = 1;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channel_id() const;
  void set_channel_id(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.system_chat_ntf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::uint32 channel_id_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class chat_err : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.chat_err) */ {
 public:
  chat_err();
  virtual ~chat_err();

  chat_err(const chat_err& from);

  inline chat_err& operator=(const chat_err& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chat_err& default_instance();

  static inline const chat_err* internal_default_instance() {
    return reinterpret_cast<const chat_err*>(
               &_chat_err_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(chat_err* other);

  // implements Message ----------------------------------------------

  inline chat_err* New() const PROTOBUF_FINAL { return New(NULL); }

  chat_err* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const chat_err& from);
  void MergeFrom(const chat_err& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(chat_err* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // uint32 token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  ::google::protobuf::uint32 token() const;
  void set_token(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chat.chat_err)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 token_;
  mutable int _cached_size_;
  friend struct protobuf_msg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// login_req

// uint64 user_id = 1;
inline void login_req::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 login_req::user_id() const {
  // @@protoc_insertion_point(field_get:chat.login_req.user_id)
  return user_id_;
}
inline void login_req::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.login_req.user_id)
}

// string nick = 2;
inline void login_req::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_req::nick() const {
  // @@protoc_insertion_point(field_get:chat.login_req.nick)
  return nick_.GetNoArena();
}
inline void login_req::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.login_req.nick)
}
#if LANG_CXX11
inline void login_req::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.login_req.nick)
}
#endif
inline void login_req::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.login_req.nick)
}
inline void login_req::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.login_req.nick)
}
inline ::std::string* login_req::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.login_req.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_req::release_nick() {
  // @@protoc_insertion_point(field_release:chat.login_req.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_req::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.login_req.nick)
}

// string server = 3;
inline void login_req::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_req::server() const {
  // @@protoc_insertion_point(field_get:chat.login_req.server)
  return server_.GetNoArena();
}
inline void login_req::set_server(const ::std::string& value) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.login_req.server)
}
#if LANG_CXX11
inline void login_req::set_server(::std::string&& value) {
  
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.login_req.server)
}
#endif
inline void login_req::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.login_req.server)
}
inline void login_req::set_server(const char* value, size_t size) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.login_req.server)
}
inline ::std::string* login_req::mutable_server() {
  
  // @@protoc_insertion_point(field_mutable:chat.login_req.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_req::release_server() {
  // @@protoc_insertion_point(field_release:chat.login_req.server)
  
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_req::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    
  } else {
    
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:chat.login_req.server)
}

// string channel_wild = 4;
inline void login_req::clear_channel_wild() {
  channel_wild_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_req::channel_wild() const {
  // @@protoc_insertion_point(field_get:chat.login_req.channel_wild)
  return channel_wild_.GetNoArena();
}
inline void login_req::set_channel_wild(const ::std::string& value) {
  
  channel_wild_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.login_req.channel_wild)
}
#if LANG_CXX11
inline void login_req::set_channel_wild(::std::string&& value) {
  
  channel_wild_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.login_req.channel_wild)
}
#endif
inline void login_req::set_channel_wild(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_wild_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.login_req.channel_wild)
}
inline void login_req::set_channel_wild(const char* value, size_t size) {
  
  channel_wild_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.login_req.channel_wild)
}
inline ::std::string* login_req::mutable_channel_wild() {
  
  // @@protoc_insertion_point(field_mutable:chat.login_req.channel_wild)
  return channel_wild_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_req::release_channel_wild() {
  // @@protoc_insertion_point(field_release:chat.login_req.channel_wild)
  
  return channel_wild_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_req::set_allocated_channel_wild(::std::string* channel_wild) {
  if (channel_wild != NULL) {
    
  } else {
    
  }
  channel_wild_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_wild);
  // @@protoc_insertion_point(field_set_allocated:chat.login_req.channel_wild)
}

// string extra = 5;
inline void login_req::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_req::extra() const {
  // @@protoc_insertion_point(field_get:chat.login_req.extra)
  return extra_.GetNoArena();
}
inline void login_req::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.login_req.extra)
}
#if LANG_CXX11
inline void login_req::set_extra(::std::string&& value) {
  
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.login_req.extra)
}
#endif
inline void login_req::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.login_req.extra)
}
inline void login_req::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.login_req.extra)
}
inline ::std::string* login_req::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:chat.login_req.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_req::release_extra() {
  // @@protoc_insertion_point(field_release:chat.login_req.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_req::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:chat.login_req.extra)
}

// -------------------------------------------------------------------

// login_ack

// int32 result = 1;
inline void login_ack::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 login_ack::result() const {
  // @@protoc_insertion_point(field_get:chat.login_ack.result)
  return result_;
}
inline void login_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.login_ack.result)
}

// uint32 chat_id = 2;
inline void login_ack::clear_chat_id() {
  chat_id_ = 0u;
}
inline ::google::protobuf::uint32 login_ack::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.login_ack.chat_id)
  return chat_id_;
}
inline void login_ack::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.login_ack.chat_id)
}

// uint64 user_id = 3;
inline void login_ack::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 login_ack::user_id() const {
  // @@protoc_insertion_point(field_get:chat.login_ack.user_id)
  return user_id_;
}
inline void login_ack::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.login_ack.user_id)
}

// string token = 4;
inline void login_ack::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_ack::token() const {
  // @@protoc_insertion_point(field_get:chat.login_ack.token)
  return token_.GetNoArena();
}
inline void login_ack::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.login_ack.token)
}
#if LANG_CXX11
inline void login_ack::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.login_ack.token)
}
#endif
inline void login_ack::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.login_ack.token)
}
inline void login_ack::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.login_ack.token)
}
inline ::std::string* login_ack::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:chat.login_ack.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_ack::release_token() {
  // @@protoc_insertion_point(field_release:chat.login_ack.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_ack::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:chat.login_ack.token)
}

// -------------------------------------------------------------------

// logout_req

// uint64 user_id = 1;
inline void logout_req::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 logout_req::user_id() const {
  // @@protoc_insertion_point(field_get:chat.logout_req.user_id)
  return user_id_;
}
inline void logout_req::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.logout_req.user_id)
}

// -------------------------------------------------------------------

// user_auth_req

// uint64 user_id = 1;
inline void user_auth_req::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 user_auth_req::user_id() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_req.user_id)
  return user_id_;
}
inline void user_auth_req::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_auth_req.user_id)
}

// string token = 2;
inline void user_auth_req::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_auth_req::token() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_req.token)
  return token_.GetNoArena();
}
inline void user_auth_req::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_auth_req.token)
}
#if LANG_CXX11
inline void user_auth_req::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_auth_req.token)
}
#endif
inline void user_auth_req::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_auth_req.token)
}
inline void user_auth_req::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_auth_req.token)
}
inline ::std::string* user_auth_req::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_auth_req.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_auth_req::release_token() {
  // @@protoc_insertion_point(field_release:chat.user_auth_req.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_auth_req::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:chat.user_auth_req.token)
}

// -------------------------------------------------------------------

// user_auth_ack

// int32 result = 1;
inline void user_auth_ack::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 user_auth_ack::result() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_ack.result)
  return result_;
}
inline void user_auth_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.user_auth_ack.result)
}

// uint32 chat_id = 2;
inline void user_auth_ack::clear_chat_id() {
  chat_id_ = 0u;
}
inline ::google::protobuf::uint32 user_auth_ack::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_ack.chat_id)
  return chat_id_;
}
inline void user_auth_ack::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_auth_ack.chat_id)
}

// uint64 user_id = 3;
inline void user_auth_ack::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 user_auth_ack::user_id() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_ack.user_id)
  return user_id_;
}
inline void user_auth_ack::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_auth_ack.user_id)
}

// string nick = 4;
inline void user_auth_ack::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_auth_ack::nick() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_ack.nick)
  return nick_.GetNoArena();
}
inline void user_auth_ack::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_auth_ack.nick)
}
#if LANG_CXX11
inline void user_auth_ack::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_auth_ack.nick)
}
#endif
inline void user_auth_ack::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_auth_ack.nick)
}
inline void user_auth_ack::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_auth_ack.nick)
}
inline ::std::string* user_auth_ack::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_auth_ack.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_auth_ack::release_nick() {
  // @@protoc_insertion_point(field_release:chat.user_auth_ack.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_auth_ack::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.user_auth_ack.nick)
}

// string extra = 5;
inline void user_auth_ack::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_auth_ack::extra() const {
  // @@protoc_insertion_point(field_get:chat.user_auth_ack.extra)
  return extra_.GetNoArena();
}
inline void user_auth_ack::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_auth_ack.extra)
}
#if LANG_CXX11
inline void user_auth_ack::set_extra(::std::string&& value) {
  
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_auth_ack.extra)
}
#endif
inline void user_auth_ack::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_auth_ack.extra)
}
inline void user_auth_ack::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_auth_ack.extra)
}
inline ::std::string* user_auth_ack::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_auth_ack.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_auth_ack::release_extra() {
  // @@protoc_insertion_point(field_release:chat.user_auth_ack.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_auth_ack::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:chat.user_auth_ack.extra)
}

// -------------------------------------------------------------------

// user_info_req

// uint64 user_id = 1;
inline void user_info_req::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 user_info_req::user_id() const {
  // @@protoc_insertion_point(field_get:chat.user_info_req.user_id)
  return user_id_;
}
inline void user_info_req::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_info_req.user_id)
}

// -------------------------------------------------------------------

// user_info_ack

// int32 result = 1;
inline void user_info_ack::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 user_info_ack::result() const {
  // @@protoc_insertion_point(field_get:chat.user_info_ack.result)
  return result_;
}
inline void user_info_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.user_info_ack.result)
}

// uint32 chat_id = 2;
inline void user_info_ack::clear_chat_id() {
  chat_id_ = 0u;
}
inline ::google::protobuf::uint32 user_info_ack::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.user_info_ack.chat_id)
  return chat_id_;
}
inline void user_info_ack::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_info_ack.chat_id)
}

// uint64 user_id = 3;
inline void user_info_ack::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 user_info_ack::user_id() const {
  // @@protoc_insertion_point(field_get:chat.user_info_ack.user_id)
  return user_id_;
}
inline void user_info_ack::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_info_ack.user_id)
}

// string nick = 4;
inline void user_info_ack::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_info_ack::nick() const {
  // @@protoc_insertion_point(field_get:chat.user_info_ack.nick)
  return nick_.GetNoArena();
}
inline void user_info_ack::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_info_ack.nick)
}
#if LANG_CXX11
inline void user_info_ack::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_info_ack.nick)
}
#endif
inline void user_info_ack::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_info_ack.nick)
}
inline void user_info_ack::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_info_ack.nick)
}
inline ::std::string* user_info_ack::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_info_ack.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_info_ack::release_nick() {
  // @@protoc_insertion_point(field_release:chat.user_info_ack.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_info_ack::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:chat.user_info_ack.nick)
}

// string extra = 5;
inline void user_info_ack::clear_extra() {
  extra_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_info_ack::extra() const {
  // @@protoc_insertion_point(field_get:chat.user_info_ack.extra)
  return extra_.GetNoArena();
}
inline void user_info_ack::set_extra(const ::std::string& value) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_info_ack.extra)
}
#if LANG_CXX11
inline void user_info_ack::set_extra(::std::string&& value) {
  
  extra_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_info_ack.extra)
}
#endif
inline void user_info_ack::set_extra(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_info_ack.extra)
}
inline void user_info_ack::set_extra(const char* value, size_t size) {
  
  extra_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_info_ack.extra)
}
inline ::std::string* user_info_ack::mutable_extra() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_info_ack.extra)
  return extra_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_info_ack::release_extra() {
  // @@protoc_insertion_point(field_release:chat.user_info_ack.extra)
  
  return extra_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_info_ack::set_allocated_extra(::std::string* extra) {
  if (extra != NULL) {
    
  } else {
    
  }
  extra_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra);
  // @@protoc_insertion_point(field_set_allocated:chat.user_info_ack.extra)
}

// -------------------------------------------------------------------

// create_channel_req

// string channel_name = 1;
inline void create_channel_req::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& create_channel_req::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.create_channel_req.channel_name)
  return channel_name_.GetNoArena();
}
inline void create_channel_req::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.create_channel_req.channel_name)
}
#if LANG_CXX11
inline void create_channel_req::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.create_channel_req.channel_name)
}
#endif
inline void create_channel_req::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.create_channel_req.channel_name)
}
inline void create_channel_req::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.create_channel_req.channel_name)
}
inline ::std::string* create_channel_req::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.create_channel_req.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* create_channel_req::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.create_channel_req.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void create_channel_req::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.create_channel_req.channel_name)
}

// -------------------------------------------------------------------

// create_channel_ack

// string channel_name = 1;
inline void create_channel_ack::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& create_channel_ack::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.create_channel_ack.channel_name)
  return channel_name_.GetNoArena();
}
inline void create_channel_ack::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.create_channel_ack.channel_name)
}
#if LANG_CXX11
inline void create_channel_ack::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.create_channel_ack.channel_name)
}
#endif
inline void create_channel_ack::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.create_channel_ack.channel_name)
}
inline void create_channel_ack::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.create_channel_ack.channel_name)
}
inline ::std::string* create_channel_ack::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.create_channel_ack.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* create_channel_ack::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.create_channel_ack.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void create_channel_ack::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.create_channel_ack.channel_name)
}

// uint32 channel_id = 2;
inline void create_channel_ack::clear_channel_id() {
  channel_id_ = 0u;
}
inline ::google::protobuf::uint32 create_channel_ack::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.create_channel_ack.channel_id)
  return channel_id_;
}
inline void create_channel_ack::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.create_channel_ack.channel_id)
}

// -------------------------------------------------------------------

// channel_enter_ntf

// uint32 channel_id = 1;
inline void channel_enter_ntf::clear_channel_id() {
  channel_id_ = 0u;
}
inline ::google::protobuf::uint32 channel_enter_ntf::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ntf.channel_id)
  return channel_id_;
}
inline void channel_enter_ntf::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_ntf.channel_id)
}

// string channel_name = 2;
inline void channel_enter_ntf::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channel_enter_ntf::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ntf.channel_name)
  return channel_name_.GetNoArena();
}
inline void channel_enter_ntf::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_enter_ntf.channel_name)
}
#if LANG_CXX11
inline void channel_enter_ntf::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_enter_ntf.channel_name)
}
#endif
inline void channel_enter_ntf::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_enter_ntf.channel_name)
}
inline void channel_enter_ntf::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_enter_ntf.channel_name)
}
inline ::std::string* channel_enter_ntf::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_enter_ntf.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channel_enter_ntf::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.channel_enter_ntf.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channel_enter_ntf::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_enter_ntf.channel_name)
}

// -------------------------------------------------------------------

// channel_enter_req

// uint32 token = 1;
inline void channel_enter_req::clear_token() {
  token_ = 0u;
}
inline ::google::protobuf::uint32 channel_enter_req::token() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_req.token)
  return token_;
}
inline void channel_enter_req::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_req.token)
}

// .chat.channel_enter_req.enter_type type = 2;
inline void channel_enter_req::clear_type() {
  type_ = 0;
}
inline ::chat::channel_enter_req_enter_type channel_enter_req::type() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_req.type)
  return static_cast< ::chat::channel_enter_req_enter_type >(type_);
}
inline void channel_enter_req::set_type(::chat::channel_enter_req_enter_type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_req.type)
}

// uint32 channel_id = 3;
inline void channel_enter_req::clear_channel_id() {
  channel_id_ = 0u;
}
inline ::google::protobuf::uint32 channel_enter_req::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_req.channel_id)
  return channel_id_;
}
inline void channel_enter_req::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_req.channel_id)
}

// string channel_name = 4;
inline void channel_enter_req::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channel_enter_req::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_req.channel_name)
  return channel_name_.GetNoArena();
}
inline void channel_enter_req::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_enter_req.channel_name)
}
#if LANG_CXX11
inline void channel_enter_req::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_enter_req.channel_name)
}
#endif
inline void channel_enter_req::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_enter_req.channel_name)
}
inline void channel_enter_req::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_enter_req.channel_name)
}
inline ::std::string* channel_enter_req::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_enter_req.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channel_enter_req::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.channel_enter_req.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channel_enter_req::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_enter_req.channel_name)
}

// string channel_pass = 5;
inline void channel_enter_req::clear_channel_pass() {
  channel_pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channel_enter_req::channel_pass() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_req.channel_pass)
  return channel_pass_.GetNoArena();
}
inline void channel_enter_req::set_channel_pass(const ::std::string& value) {
  
  channel_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_enter_req.channel_pass)
}
#if LANG_CXX11
inline void channel_enter_req::set_channel_pass(::std::string&& value) {
  
  channel_pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_enter_req.channel_pass)
}
#endif
inline void channel_enter_req::set_channel_pass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_enter_req.channel_pass)
}
inline void channel_enter_req::set_channel_pass(const char* value, size_t size) {
  
  channel_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_enter_req.channel_pass)
}
inline ::std::string* channel_enter_req::mutable_channel_pass() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_enter_req.channel_pass)
  return channel_pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channel_enter_req::release_channel_pass() {
  // @@protoc_insertion_point(field_release:chat.channel_enter_req.channel_pass)
  
  return channel_pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channel_enter_req::set_allocated_channel_pass(::std::string* channel_pass) {
  if (channel_pass != NULL) {
    
  } else {
    
  }
  channel_pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_pass);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_enter_req.channel_pass)
}

// -------------------------------------------------------------------

// channel_enter_ack

// int32 result = 1;
inline void channel_enter_ack::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 channel_enter_ack::result() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ack.result)
  return result_;
}
inline void channel_enter_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_ack.result)
}

// uint32 token = 2;
inline void channel_enter_ack::clear_token() {
  token_ = 0u;
}
inline ::google::protobuf::uint32 channel_enter_ack::token() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ack.token)
  return token_;
}
inline void channel_enter_ack::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_ack.token)
}

// uint32 channel_id = 3;
inline void channel_enter_ack::clear_channel_id() {
  channel_id_ = 0u;
}
inline ::google::protobuf::uint32 channel_enter_ack::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ack.channel_id)
  return channel_id_;
}
inline void channel_enter_ack::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_enter_ack.channel_id)
}

// string channel_name = 4;
inline void channel_enter_ack::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channel_enter_ack::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.channel_enter_ack.channel_name)
  return channel_name_.GetNoArena();
}
inline void channel_enter_ack::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_enter_ack.channel_name)
}
#if LANG_CXX11
inline void channel_enter_ack::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_enter_ack.channel_name)
}
#endif
inline void channel_enter_ack::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_enter_ack.channel_name)
}
inline void channel_enter_ack::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_enter_ack.channel_name)
}
inline ::std::string* channel_enter_ack::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_enter_ack.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channel_enter_ack::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.channel_enter_ack.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channel_enter_ack::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_enter_ack.channel_name)
}

// -------------------------------------------------------------------

// channel_leave_req

// uint32 channel_id = 1;
inline void channel_leave_req::clear_channel_id() {
  channel_id_ = 0u;
}
inline ::google::protobuf::uint32 channel_leave_req::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_leave_req.channel_id)
  return channel_id_;
}
inline void channel_leave_req::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_leave_req.channel_id)
}

// -------------------------------------------------------------------

// channel_leave_ack

// int32 result = 1;
inline void channel_leave_ack::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 channel_leave_ack::result() const {
  // @@protoc_insertion_point(field_get:chat.channel_leave_ack.result)
  return result_;
}
inline void channel_leave_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_leave_ack.result)
}

// uint32 channel_id = 2;
inline void channel_leave_ack::clear_channel_id() {
  channel_id_ = 0u;
}
inline ::google::protobuf::uint32 channel_leave_ack::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_leave_ack.channel_id)
  return channel_id_;
}
inline void channel_leave_ack::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_leave_ack.channel_id)
}

// string channel_name = 3;
inline void channel_leave_ack::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channel_leave_ack::channel_name() const {
  // @@protoc_insertion_point(field_get:chat.channel_leave_ack.channel_name)
  return channel_name_.GetNoArena();
}
inline void channel_leave_ack::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_leave_ack.channel_name)
}
#if LANG_CXX11
inline void channel_leave_ack::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_leave_ack.channel_name)
}
#endif
inline void channel_leave_ack::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_leave_ack.channel_name)
}
inline void channel_leave_ack::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_leave_ack.channel_name)
}
inline ::std::string* channel_leave_ack::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_leave_ack.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channel_leave_ack::release_channel_name() {
  // @@protoc_insertion_point(field_release:chat.channel_leave_ack.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channel_leave_ack::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_leave_ack.channel_name)
}

// -------------------------------------------------------------------

// user_chat_req

// uint32 token = 1;
inline void user_chat_req::clear_token() {
  token_ = 0u;
}
inline ::google::protobuf::uint32 user_chat_req::token() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_req.token)
  return token_;
}
inline void user_chat_req::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.user_chat_req.token)
}

// uint32 chat_id = 2;
inline void user_chat_req::clear_chat_id() {
  chat_id_ = 0u;
}
inline ::google::protobuf::uint32 user_chat_req::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_req.chat_id)
  return chat_id_;
}
inline void user_chat_req::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_chat_req.chat_id)
}

// string text = 3;
inline void user_chat_req::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_chat_req::text() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_req.text)
  return text_.GetNoArena();
}
inline void user_chat_req::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_chat_req.text)
}
#if LANG_CXX11
inline void user_chat_req::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_chat_req.text)
}
#endif
inline void user_chat_req::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_chat_req.text)
}
inline void user_chat_req::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_chat_req.text)
}
inline ::std::string* user_chat_req::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_chat_req.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_chat_req::release_text() {
  // @@protoc_insertion_point(field_release:chat.user_chat_req.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_chat_req::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.user_chat_req.text)
}

// -------------------------------------------------------------------

// user_chat_ntf

// uint32 token = 1;
inline void user_chat_ntf::clear_token() {
  token_ = 0u;
}
inline ::google::protobuf::uint32 user_chat_ntf::token() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_ntf.token)
  return token_;
}
inline void user_chat_ntf::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.user_chat_ntf.token)
}

// uint32 chat_id = 2;
inline void user_chat_ntf::clear_chat_id() {
  chat_id_ = 0u;
}
inline ::google::protobuf::uint32 user_chat_ntf::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_ntf.chat_id)
  return chat_id_;
}
inline void user_chat_ntf::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.user_chat_ntf.chat_id)
}

// string text = 3;
inline void user_chat_ntf::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user_chat_ntf::text() const {
  // @@protoc_insertion_point(field_get:chat.user_chat_ntf.text)
  return text_.GetNoArena();
}
inline void user_chat_ntf::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.user_chat_ntf.text)
}
#if LANG_CXX11
inline void user_chat_ntf::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.user_chat_ntf.text)
}
#endif
inline void user_chat_ntf::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.user_chat_ntf.text)
}
inline void user_chat_ntf::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.user_chat_ntf.text)
}
inline ::std::string* user_chat_ntf::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.user_chat_ntf.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user_chat_ntf::release_text() {
  // @@protoc_insertion_point(field_release:chat.user_chat_ntf.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user_chat_ntf::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.user_chat_ntf.text)
}

// -------------------------------------------------------------------

// channel_chat_req

// uint32 token = 1;
inline void channel_chat_req::clear_token() {
  token_ = 0u;
}
inline ::google::protobuf::uint32 channel_chat_req::token() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_req.token)
  return token_;
}
inline void channel_chat_req::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_chat_req.token)
}

// uint32 channel_id = 2;
inline void channel_chat_req::clear_channel_id() {
  channel_id_ = 0u;
}
inline ::google::protobuf::uint32 channel_chat_req::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_req.channel_id)
  return channel_id_;
}
inline void channel_chat_req::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_chat_req.channel_id)
}

// string text = 3;
inline void channel_chat_req::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channel_chat_req::text() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_req.text)
  return text_.GetNoArena();
}
inline void channel_chat_req::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_chat_req.text)
}
#if LANG_CXX11
inline void channel_chat_req::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_chat_req.text)
}
#endif
inline void channel_chat_req::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_chat_req.text)
}
inline void channel_chat_req::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_chat_req.text)
}
inline ::std::string* channel_chat_req::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_chat_req.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channel_chat_req::release_text() {
  // @@protoc_insertion_point(field_release:chat.channel_chat_req.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channel_chat_req::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_chat_req.text)
}

// -------------------------------------------------------------------

// channel_chat_ntf

// uint32 token = 1;
inline void channel_chat_ntf::clear_token() {
  token_ = 0u;
}
inline ::google::protobuf::uint32 channel_chat_ntf::token() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_ntf.token)
  return token_;
}
inline void channel_chat_ntf::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_chat_ntf.token)
}

// uint32 channel_id = 2;
inline void channel_chat_ntf::clear_channel_id() {
  channel_id_ = 0u;
}
inline ::google::protobuf::uint32 channel_chat_ntf::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_ntf.channel_id)
  return channel_id_;
}
inline void channel_chat_ntf::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_chat_ntf.channel_id)
}

// uint32 chat_id = 3;
inline void channel_chat_ntf::clear_chat_id() {
  chat_id_ = 0u;
}
inline ::google::protobuf::uint32 channel_chat_ntf::chat_id() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_ntf.chat_id)
  return chat_id_;
}
inline void channel_chat_ntf::set_chat_id(::google::protobuf::uint32 value) {
  
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:chat.channel_chat_ntf.chat_id)
}

// string text = 4;
inline void channel_chat_ntf::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channel_chat_ntf::text() const {
  // @@protoc_insertion_point(field_get:chat.channel_chat_ntf.text)
  return text_.GetNoArena();
}
inline void channel_chat_ntf::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.channel_chat_ntf.text)
}
#if LANG_CXX11
inline void channel_chat_ntf::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.channel_chat_ntf.text)
}
#endif
inline void channel_chat_ntf::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.channel_chat_ntf.text)
}
inline void channel_chat_ntf::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.channel_chat_ntf.text)
}
inline ::std::string* channel_chat_ntf::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.channel_chat_ntf.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channel_chat_ntf::release_text() {
  // @@protoc_insertion_point(field_release:chat.channel_chat_ntf.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channel_chat_ntf::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.channel_chat_ntf.text)
}

// -------------------------------------------------------------------

// system_chat_req

// uint32 channel = 1;
inline void system_chat_req::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 system_chat_req::channel() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_req.channel)
  return channel_;
}
inline void system_chat_req::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:chat.system_chat_req.channel)
}

// uint32 flags = 2;
inline void system_chat_req::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 system_chat_req::flags() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_req.flags)
  return flags_;
}
inline void system_chat_req::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:chat.system_chat_req.flags)
}

// string text = 3;
inline void system_chat_req::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& system_chat_req::text() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_req.text)
  return text_.GetNoArena();
}
inline void system_chat_req::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.system_chat_req.text)
}
#if LANG_CXX11
inline void system_chat_req::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.system_chat_req.text)
}
#endif
inline void system_chat_req::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.system_chat_req.text)
}
inline void system_chat_req::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.system_chat_req.text)
}
inline ::std::string* system_chat_req::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.system_chat_req.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* system_chat_req::release_text() {
  // @@protoc_insertion_point(field_release:chat.system_chat_req.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void system_chat_req::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.system_chat_req.text)
}

// -------------------------------------------------------------------

// system_chat_ntf

// uint32 channel_id = 1;
inline void system_chat_ntf::clear_channel_id() {
  channel_id_ = 0u;
}
inline ::google::protobuf::uint32 system_chat_ntf::channel_id() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_ntf.channel_id)
  return channel_id_;
}
inline void system_chat_ntf::set_channel_id(::google::protobuf::uint32 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:chat.system_chat_ntf.channel_id)
}

// uint32 flags = 2;
inline void system_chat_ntf::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 system_chat_ntf::flags() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_ntf.flags)
  return flags_;
}
inline void system_chat_ntf::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:chat.system_chat_ntf.flags)
}

// string text = 3;
inline void system_chat_ntf::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& system_chat_ntf::text() const {
  // @@protoc_insertion_point(field_get:chat.system_chat_ntf.text)
  return text_.GetNoArena();
}
inline void system_chat_ntf::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.system_chat_ntf.text)
}
#if LANG_CXX11
inline void system_chat_ntf::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.system_chat_ntf.text)
}
#endif
inline void system_chat_ntf::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.system_chat_ntf.text)
}
inline void system_chat_ntf::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.system_chat_ntf.text)
}
inline ::std::string* system_chat_ntf::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:chat.system_chat_ntf.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* system_chat_ntf::release_text() {
  // @@protoc_insertion_point(field_release:chat.system_chat_ntf.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void system_chat_ntf::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chat.system_chat_ntf.text)
}

// -------------------------------------------------------------------

// chat_err

// int32 result = 1;
inline void chat_err::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 chat_err::result() const {
  // @@protoc_insertion_point(field_get:chat.chat_err.result)
  return result_;
}
inline void chat_err::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:chat.chat_err.result)
}

// uint32 token = 2;
inline void chat_err::clear_token() {
  token_ = 0u;
}
inline ::google::protobuf::uint32 chat_err::token() const {
  // @@protoc_insertion_point(field_get:chat.chat_err.token)
  return token_;
}
inline void chat_err::set_token(::google::protobuf::uint32 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:chat.chat_err.token)
}

// string description = 3;
inline void chat_err::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& chat_err::description() const {
  // @@protoc_insertion_point(field_get:chat.chat_err.description)
  return description_.GetNoArena();
}
inline void chat_err::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.chat_err.description)
}
#if LANG_CXX11
inline void chat_err::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.chat_err.description)
}
#endif
inline void chat_err::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.chat_err.description)
}
inline void chat_err::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.chat_err.description)
}
inline ::std::string* chat_err::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:chat.chat_err.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* chat_err::release_description() {
  // @@protoc_insertion_point(field_release:chat.chat_err.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void chat_err::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:chat.chat_err.description)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace chat

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chat::channel_enter_req_enter_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::channel_enter_req_enter_type>() {
  return ::chat::channel_enter_req_enter_type_descriptor();
}
template <> struct is_proto_enum< ::chat::MSG_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::MSG_ID>() {
  return ::chat::MSG_ID_descriptor();
}
template <> struct is_proto_enum< ::chat::CHAT_T> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::CHAT_T>() {
  return ::chat::CHAT_T_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2eproto__INCLUDED
