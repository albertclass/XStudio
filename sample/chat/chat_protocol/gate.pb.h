// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate.proto

#ifndef PROTOBUF_gate_2eproto__INCLUDED
#define PROTOBUF_gate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace gate {
class login_ack;
class login_ackDefaultTypeInternal;
extern login_ackDefaultTypeInternal _login_ack_default_instance_;
class login_req;
class login_reqDefaultTypeInternal;
extern login_reqDefaultTypeInternal _login_req_default_instance_;
class logout_req;
class logout_reqDefaultTypeInternal;
extern logout_reqDefaultTypeInternal _logout_req_default_instance_;
}  // namespace gate

namespace gate {

namespace protobuf_gate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_gate_2eproto

enum GATE_MSG_ID {
  GATE_MSG_BEGIN = 0,
  GATE_MSG_LOGIN_REQ = 4097,
  GATE_MSG_LOGIN_ACK = 4098,
  GATE_MSG_LOGOUT_REQ = 4099,
  GATE_MSG_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GATE_MSG_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GATE_MSG_ID_IsValid(int value);
const GATE_MSG_ID GATE_MSG_ID_MIN = GATE_MSG_BEGIN;
const GATE_MSG_ID GATE_MSG_ID_MAX = GATE_MSG_LOGOUT_REQ;
const int GATE_MSG_ID_ARRAYSIZE = GATE_MSG_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* GATE_MSG_ID_descriptor();
inline const ::std::string& GATE_MSG_ID_Name(GATE_MSG_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    GATE_MSG_ID_descriptor(), value);
}
inline bool GATE_MSG_ID_Parse(
    const ::std::string& name, GATE_MSG_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GATE_MSG_ID>(
    GATE_MSG_ID_descriptor(), name, value);
}
// ===================================================================

class login_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.login_req) */ {
 public:
  login_req();
  virtual ~login_req();

  login_req(const login_req& from);

  inline login_req& operator=(const login_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_req& default_instance();

  static inline const login_req* internal_default_instance() {
    return reinterpret_cast<const login_req*>(
               &_login_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(login_req* other);

  // implements Message ----------------------------------------------

  inline login_req* New() const PROTOBUF_FINAL { return New(NULL); }

  login_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const login_req& from);
  void MergeFrom(const login_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(login_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:gate.login_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class login_ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.login_ack) */ {
 public:
  login_ack();
  virtual ~login_ack();

  login_ack(const login_ack& from);

  inline login_ack& operator=(const login_ack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_ack& default_instance();

  static inline const login_ack* internal_default_instance() {
    return reinterpret_cast<const login_ack*>(
               &_login_ack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(login_ack* other);

  // implements Message ----------------------------------------------

  inline login_ack* New() const PROTOBUF_FINAL { return New(NULL); }

  login_ack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const login_ack& from);
  void MergeFrom(const login_ack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(login_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string chat_token = 3;
  void clear_chat_token();
  static const int kChatTokenFieldNumber = 3;
  const ::std::string& chat_token() const;
  void set_chat_token(const ::std::string& value);
  #if LANG_CXX11
  void set_chat_token(::std::string&& value);
  #endif
  void set_chat_token(const char* value);
  void set_chat_token(const char* value, size_t size);
  ::std::string* mutable_chat_token();
  ::std::string* release_chat_token();
  void set_allocated_chat_token(::std::string* chat_token);

  // uint64 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gate.login_ack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chat_token_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class logout_req : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gate.logout_req) */ {
 public:
  logout_req();
  virtual ~logout_req();

  logout_req(const logout_req& from);

  inline logout_req& operator=(const logout_req& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const logout_req& default_instance();

  static inline const logout_req* internal_default_instance() {
    return reinterpret_cast<const logout_req*>(
               &_logout_req_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(logout_req* other);

  // implements Message ----------------------------------------------

  inline logout_req* New() const PROTOBUF_FINAL { return New(NULL); }

  logout_req* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const logout_req& from);
  void MergeFrom(const logout_req& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(logout_req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:gate.logout_req)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_gate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// login_req

// string username = 1;
inline void login_req::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_req::username() const {
  // @@protoc_insertion_point(field_get:gate.login_req.username)
  return username_.GetNoArena();
}
inline void login_req::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gate.login_req.username)
}
#if LANG_CXX11
inline void login_req::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gate.login_req.username)
}
#endif
inline void login_req::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gate.login_req.username)
}
inline void login_req::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gate.login_req.username)
}
inline ::std::string* login_req::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:gate.login_req.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_req::release_username() {
  // @@protoc_insertion_point(field_release:gate.login_req.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_req::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:gate.login_req.username)
}

// string password = 2;
inline void login_req::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_req::password() const {
  // @@protoc_insertion_point(field_get:gate.login_req.password)
  return password_.GetNoArena();
}
inline void login_req::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gate.login_req.password)
}
#if LANG_CXX11
inline void login_req::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gate.login_req.password)
}
#endif
inline void login_req::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gate.login_req.password)
}
inline void login_req::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gate.login_req.password)
}
inline ::std::string* login_req::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:gate.login_req.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_req::release_password() {
  // @@protoc_insertion_point(field_release:gate.login_req.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_req::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:gate.login_req.password)
}

// -------------------------------------------------------------------

// login_ack

// int32 result = 1;
inline void login_ack::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 login_ack::result() const {
  // @@protoc_insertion_point(field_get:gate.login_ack.result)
  return result_;
}
inline void login_ack::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:gate.login_ack.result)
}

// uint64 user_id = 2;
inline void login_ack::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 login_ack::user_id() const {
  // @@protoc_insertion_point(field_get:gate.login_ack.user_id)
  return user_id_;
}
inline void login_ack::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:gate.login_ack.user_id)
}

// string chat_token = 3;
inline void login_ack::clear_chat_token() {
  chat_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login_ack::chat_token() const {
  // @@protoc_insertion_point(field_get:gate.login_ack.chat_token)
  return chat_token_.GetNoArena();
}
inline void login_ack::set_chat_token(const ::std::string& value) {
  
  chat_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gate.login_ack.chat_token)
}
#if LANG_CXX11
inline void login_ack::set_chat_token(::std::string&& value) {
  
  chat_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gate.login_ack.chat_token)
}
#endif
inline void login_ack::set_chat_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chat_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gate.login_ack.chat_token)
}
inline void login_ack::set_chat_token(const char* value, size_t size) {
  
  chat_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gate.login_ack.chat_token)
}
inline ::std::string* login_ack::mutable_chat_token() {
  
  // @@protoc_insertion_point(field_mutable:gate.login_ack.chat_token)
  return chat_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login_ack::release_chat_token() {
  // @@protoc_insertion_point(field_release:gate.login_ack.chat_token)
  
  return chat_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login_ack::set_allocated_chat_token(::std::string* chat_token) {
  if (chat_token != NULL) {
    
  } else {
    
  }
  chat_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_token);
  // @@protoc_insertion_point(field_set_allocated:gate.login_ack.chat_token)
}

// -------------------------------------------------------------------

// logout_req

// uint64 user_id = 1;
inline void logout_req::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 logout_req::user_id() const {
  // @@protoc_insertion_point(field_get:gate.logout_req.user_id)
  return user_id_;
}
inline void logout_req::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:gate.logout_req.user_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace gate

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gate::GATE_MSG_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gate::GATE_MSG_ID>() {
  return ::gate::GATE_MSG_ID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gate_2eproto__INCLUDED
